//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ceu_Education_MVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CeuEntities : DbContext
    {
        public CeuEntities()
            : base("name=CeuEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public DbSet<aspnet_Users> aspnet_Users { get; set; }
        public DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public DbSet<PaymentMethod> PaymentMethods { get; set; }
        public DbSet<PaymentReport> PaymentReports { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<tbl_AbondonPassword> tbl_AbondonPassword { get; set; }
        public DbSet<tbl_AbondonUserNames> tbl_AbondonUserNames { get; set; }
        public DbSet<tbl_AboutUs> tbl_AboutUs { get; set; }
        public DbSet<tbl_AddressType> tbl_AddressType { get; set; }
        public DbSet<tbl_Attendance> tbl_Attendance { get; set; }
        public DbSet<tbl_CEU_Certificate_Download> tbl_CEU_Certificate_Download { get; set; }
        public DbSet<tbl_Cities> tbl_Cities { get; set; }
        public DbSet<tbl_Conference_Courses> tbl_Conference_Courses { get; set; }
        public DbSet<tbl_Conference_Dates> tbl_Conference_Dates { get; set; }
        public DbSet<tbl_Conference_Facilities> tbl_Conference_Facilities { get; set; }
        public DbSet<tbl_Conference_Sponsors> tbl_Conference_Sponsors { get; set; }
        public DbSet<tbl_Conference_Venue_Types> tbl_Conference_Venue_Types { get; set; }
        public DbSet<tbl_ConferenceEnrollment> tbl_ConferenceEnrollment { get; set; }
        public DbSet<tbl_Conferences> tbl_Conferences { get; set; }
        public DbSet<tbl_Countries> tbl_Countries { get; set; }
        public DbSet<tbl_Course_Attendance> tbl_Course_Attendance { get; set; }
        public DbSet<tbl_Course_Credit_Issuers> tbl_Course_Credit_Issuers { get; set; }
        public DbSet<tbl_Course_Effects> tbl_Course_Effects { get; set; }
        public DbSet<tbl_Course_Enrollment> tbl_Course_Enrollment { get; set; }
        public DbSet<tbl_Course_Evaluation_Methods> tbl_Course_Evaluation_Methods { get; set; }
        public DbSet<tbl_Course_Facilities> tbl_Course_Facilities { get; set; }
        public DbSet<tbl_Course_Focuses> tbl_Course_Focuses { get; set; }
        public DbSet<tbl_Course_Learning_Outcomes> tbl_Course_Learning_Outcomes { get; set; }
        public DbSet<tbl_Course_Presenters> tbl_Course_Presenters { get; set; }
        public DbSet<tbl_Course_Sponsors> tbl_Course_Sponsors { get; set; }
        public DbSet<tbl_Course_Survey> tbl_Course_Survey { get; set; }
        public DbSet<tbl_Course_Topics> tbl_Course_Topics { get; set; }
        public DbSet<tbl_Course_Venue_Options> tbl_Course_Venue_Options { get; set; }
        public DbSet<tbl_Courses> tbl_Courses { get; set; }
        public DbSet<tbl_Credential_Phrases> tbl_Credential_Phrases { get; set; }
        public DbSet<tbl_Current_User> tbl_Current_User { get; set; }
        public DbSet<tbl_Degree_Types> tbl_Degree_Types { get; set; }
        public DbSet<tbl_Degrees> tbl_Degrees { get; set; }
        public DbSet<tbl_District_Sites> tbl_District_Sites { get; set; }
        public DbSet<tbl_Districts> tbl_Districts { get; set; }
        public DbSet<tbl_Ecommerce_Transactions> tbl_Ecommerce_Transactions { get; set; }
        public DbSet<tbl_Enrollment_Master> tbl_Enrollment_Master { get; set; }
        public DbSet<tbl_Event_Facilities> tbl_Event_Facilities { get; set; }
        public DbSet<tbl_Facilities> tbl_Facilities { get; set; }
        public DbSet<tbl_Fee_Details> tbl_Fee_Details { get; set; }
        public DbSet<tbl_Fee_Master> tbl_Fee_Master { get; set; }
        public DbSet<tbl_Fee_Types> tbl_Fee_Types { get; set; }
        public DbSet<tbl_Issuers> tbl_Issuers { get; set; }
        public DbSet<tbl_License_Levels> tbl_License_Levels { get; set; }
        public DbSet<tbl_Licenses> tbl_Licenses { get; set; }
        public DbSet<tbl_Licensing> tbl_Licensing { get; set; }
        public DbSet<tbl_OnlineCourses> tbl_OnlineCourses { get; set; }
        public DbSet<tbl_org_regulation> tbl_org_regulation { get; set; }
        public DbSet<tbl_Organization_Professions> tbl_Organization_Professions { get; set; }
        public DbSet<tbl_Organizations> tbl_Organizations { get; set; }
        public DbSet<tbl_Person> tbl_Person { get; set; }
        public DbSet<tbl_Person_2> tbl_Person_2 { get; set; }
        public DbSet<tbl_Person_Degrees> tbl_Person_Degrees { get; set; }
        public DbSet<tbl_Person_Licenses> tbl_Person_Licenses { get; set; }
        public DbSet<tbl_Person_Organization_Roles> tbl_Person_Organization_Roles { get; set; }
        public DbSet<tbl_PersonOrganizationMemberships> tbl_PersonOrganizationMemberships { get; set; }
        public DbSet<tbl_Persons_Professions> tbl_Persons_Professions { get; set; }
        public DbSet<tbl_Presenters> tbl_Presenters { get; set; }
        public DbSet<tbl_Profession_Degrees> tbl_Profession_Degrees { get; set; }
        public DbSet<tbl_professions> tbl_professions { get; set; }
        public DbSet<tbl_Providers> tbl_Providers { get; set; }
        public DbSet<tbl_Questions> tbl_Questions { get; set; }
        public DbSet<tbl_QuestionScale> tbl_QuestionScale { get; set; }
        public DbSet<tbl_Regulators> tbl_Regulators { get; set; }
        public DbSet<tbl_Role_Types> tbl_Role_Types { get; set; }
        public DbSet<tbl_Roles> tbl_Roles { get; set; }
        public DbSet<tbl_School> tbl_School { get; set; }
        public DbSet<tbl_Secret_Questions> tbl_Secret_Questions { get; set; }
        public DbSet<tbl_Sex> tbl_Sex { get; set; }
        public DbSet<tbl_Sites> tbl_Sites { get; set; }
        public DbSet<tbl_SPARQi_Products> tbl_SPARQi_Products { get; set; }
        public DbSet<tbl_States> tbl_States { get; set; }
        public DbSet<tbl_Suffixes> tbl_Suffixes { get; set; }
        public DbSet<tbl_Survey> tbl_Survey { get; set; }
        public DbSet<tbl_Survey_Questions> tbl_Survey_Questions { get; set; }
        public DbSet<tbl_Survey_Results> tbl_Survey_Results { get; set; }
        public DbSet<tbl_Upload_Files> tbl_Upload_Files { get; set; }
        public DbSet<tbl_Venue_Types> tbl_Venue_Types { get; set; }
        public DbSet<tbl_WhatsNew> tbl_WhatsNew { get; set; }
        public DbSet<VideosHistory> VideosHistories { get; set; }
        public DbSet<vw_aspnet_Applications> vw_aspnet_Applications { get; set; }
        public DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }
        public DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }
        public DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }
        public DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }
        public DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }
        public DbSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths { get; set; }
        public DbSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared { get; set; }
        public DbSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User { get; set; }
    
        [EdmFunction("CeuEntities", "fnPOSplitter")]
        public virtual IQueryable<fnPOSplitter_Result> fnPOSplitter(string pOIDs)
        {
            var pOIDsParameter = pOIDs != null ?
                new ObjectParameter("POIDs", pOIDs) :
                new ObjectParameter("POIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPOSplitter_Result>("[CeuEntities].[fnPOSplitter](@POIDs)", pOIDsParameter);
        }
    
        public virtual ObjectResult<f_sp_Login_Users_Test_Result> f_sp_Login_Users_Test()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_sp_Login_Users_Test_Result>("f_sp_Login_Users_Test");
        }
    
        public virtual ObjectResult<Nullable<int>> ApproveUsers(Nullable<int> personID, Nullable<int> oID, Nullable<int> roleID, string command)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var commandParameter = command != null ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ApproveUsers", personIDParameter, oIDParameter, roleIDParameter, commandParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckAvailability(Nullable<int> personID, string type, string parameter, Nullable<int> oID, Nullable<int> roleID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckAvailability", personIDParameter, typeParameter, parameterParameter, oIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckMemberID(string membershipID, Nullable<int> personID, Nullable<int> organizationID)
        {
            var membershipIDParameter = membershipID != null ?
                new ObjectParameter("MembershipID", membershipID) :
                new ObjectParameter("MembershipID", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckMemberID", membershipIDParameter, personIDParameter, organizationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckTimmingConflicts(Nullable<int> personID, string starTime, string endTime)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var starTimeParameter = starTime != null ?
                new ObjectParameter("StarTime", starTime) :
                new ObjectParameter("StarTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckTimmingConflicts", personIDParameter, starTimeParameter, endTimeParameter);
        }
    
        public virtual int CreateBulkReg(string filename, Nullable<int> organizationID)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateBulkReg", filenameParameter, organizationIDParameter);
        }
    
        public virtual int CreateNewCredentials(Nullable<int> enrollmentMasterID)
        {
            var enrollmentMasterIDParameter = enrollmentMasterID.HasValue ?
                new ObjectParameter("EnrollmentMasterID", enrollmentMasterID) :
                new ObjectParameter("EnrollmentMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateNewCredentials", enrollmentMasterIDParameter);
        }
    
        public virtual int CreateNewCredentialsConference(Nullable<int> enrollmentMasterID)
        {
            var enrollmentMasterIDParameter = enrollmentMasterID.HasValue ?
                new ObjectParameter("EnrollmentMasterID", enrollmentMasterID) :
                new ObjectParameter("EnrollmentMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateNewCredentialsConference", enrollmentMasterIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreatePushEnrollments(Nullable<int> courseID, Nullable<long> personID, Nullable<int> paymentMethodID, string promoCode, Nullable<int> feeTypeID, string amount, Nullable<int> oID, string eventType)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreatePushEnrollments", courseIDParameter, personIDParameter, paymentMethodIDParameter, promoCodeParameter, feeTypeIDParameter, amountParameter, oIDParameter, eventTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateRegulatory(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateRegulatory", organizationIDParameter);
        }
    
        public virtual int CreateRegulatoryBodies(Nullable<int> organizationID, Nullable<int> regulatoryID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var regulatoryIDParameter = regulatoryID.HasValue ?
                new ObjectParameter("RegulatoryID", regulatoryID) :
                new ObjectParameter("RegulatoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateRegulatoryBodies", organizationIDParameter, regulatoryIDParameter);
        }
    
        public virtual int DeleteDuplicateIdentity(Nullable<long> personID, Nullable<long> personIDsurviving)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var personIDsurvivingParameter = personIDsurviving.HasValue ?
                new ObjectParameter("PersonIDsurviving", personIDsurviving) :
                new ObjectParameter("PersonIDsurviving", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDuplicateIdentity", personIDParameter, personIDsurvivingParameter);
        }
    
        public virtual int DeleteOrgProfession(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrgProfession", organizationIDParameter);
        }
    
        public virtual int DeletePersonRolesOnly(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePersonRolesOnly", personIDParameter);
        }
    
        public virtual int DeleteProfession(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProfession", personIDParameter);
        }
    
        public virtual int DeleteRegulatory(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRegulatory", organizationIDParameter);
        }
    
        public virtual int DeleteRegulatoryBody(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRegulatoryBody", organizationIDParameter);
        }
    
        public virtual ObjectResult<GetAllAcountRep_Result> GetAllAcountRep(Nullable<int> organizationId)
        {
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAcountRep_Result>("GetAllAcountRep", organizationIdParameter);
        }
    
        public virtual ObjectResult<GetAllPersonsWithRoleID_Result> GetAllPersonsWithRoleID(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPersonsWithRoleID_Result>("GetAllPersonsWithRoleID", organizationIDParameter);
        }
    
        public virtual ObjectResult<GetAllProfessions_Result> GetAllProfessions(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProfessions_Result>("GetAllProfessions", personIDParameter);
        }
    
        public virtual ObjectResult<GetAllProfessionsForOrganization_Result> GetAllProfessionsForOrganization(Nullable<int> organizationID, Nullable<int> isNewOrganization)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var isNewOrganizationParameter = isNewOrganization.HasValue ?
                new ObjectParameter("IsNewOrganization", isNewOrganization) :
                new ObjectParameter("IsNewOrganization", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProfessionsForOrganization_Result>("GetAllProfessionsForOrganization", organizationIDParameter, isNewOrganizationParameter);
        }
    
        public virtual ObjectResult<GetConferenceAmountAndTransactionID_Result> GetConferenceAmountAndTransactionID(Nullable<int> conferenceID, Nullable<int> personID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConferenceAmountAndTransactionID_Result>("GetConferenceAmountAndTransactionID", conferenceIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<GetConferenceAttendeeListForConferenceRoster_Get_Result> GetConferenceAttendeeListForConferenceRoster_Get(Nullable<int> conferenceID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConferenceAttendeeListForConferenceRoster_Get_Result>("GetConferenceAttendeeListForConferenceRoster_Get", conferenceIDParameter);
        }
    
        public virtual ObjectResult<GetConferenceforPushEnrollment_Result> GetConferenceforPushEnrollment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConferenceforPushEnrollment_Result>("GetConferenceforPushEnrollment");
        }
    
        public virtual ObjectResult<GetCourseAmount_Result> GetCourseAmount(Nullable<int> courseID, Nullable<int> personID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseAmount_Result>("GetCourseAmount", courseIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<GetCourseAmountAndTransactionID_Result> GetCourseAmountAndTransactionID(Nullable<int> courseID, Nullable<int> personID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseAmountAndTransactionID_Result>("GetCourseAmountAndTransactionID", courseIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<GetCoursesforPushEnrollment_Result> GetCoursesforPushEnrollment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCoursesforPushEnrollment_Result>("GetCoursesforPushEnrollment");
        }
    
        public virtual ObjectResult<GetDuplicatePersonRecords_Result> GetDuplicatePersonRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDuplicatePersonRecords_Result>("GetDuplicatePersonRecords");
        }
    
        public virtual ObjectResult<Nullable<int>> GetEnrollmentMasterID(Nullable<int> personID, Nullable<int> courseID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEnrollmentMasterID", personIDParameter, courseIDParameter);
        }
    
        public virtual int GetEventsforPushEnroll(string eventType)
        {
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEventsforPushEnroll", eventTypeParameter);
        }
    
        public virtual ObjectResult<GetFeeMatrixForEnterprise_Result> GetFeeMatrixForEnterprise(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFeeMatrixForEnterprise_Result>("GetFeeMatrixForEnterprise", organizationIDParameter);
        }
    
        public virtual ObjectResult<GetItineraries_Result> GetItineraries(Nullable<int> conferenceID, Nullable<int> personID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItineraries_Result>("GetItineraries", conferenceIDParameter, personIDParameter);
        }
    
        public virtual int GetMembersForEnroll(Nullable<int> organizationID, Nullable<int> eventID, string eventType)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMembersForEnroll", organizationIDParameter, eventIDParameter, eventTypeParameter);
        }
    
        public virtual ObjectResult<GetPaymentsReport_Result> GetPaymentsReport(Nullable<long> personID, Nullable<long> organizationID, Nullable<int> eventID, string eventType)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentsReport_Result>("GetPaymentsReport", personIDParameter, organizationIDParameter, eventIDParameter, eventTypeParameter);
        }
    
        public virtual ObjectResult<GetPendingApprovalSponsors_Result> GetPendingApprovalSponsors(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingApprovalSponsors_Result>("GetPendingApprovalSponsors", organizationIDParameter);
        }
    
        public virtual ObjectResult<GetPersonCredentials_Result> GetPersonCredentials(Nullable<int> personID, Nullable<int> oID, Nullable<int> roleID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonCredentials_Result>("GetPersonCredentials", personIDParameter, oIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<GetPersonCredentialsNewUser_Result> GetPersonCredentialsNewUser(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonCredentialsNewUser_Result>("GetPersonCredentialsNewUser", personIDParameter);
        }
    
        public virtual ObjectResult<GetProducts_Result> GetProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProducts_Result>("GetProducts");
        }
    
        public virtual ObjectResult<GetProffesionRelatedDeg_Result> GetProffesionRelatedDeg(string professionID, Nullable<int> personID)
        {
            var professionIDParameter = professionID != null ?
                new ObjectParameter("ProfessionID", professionID) :
                new ObjectParameter("ProfessionID", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProffesionRelatedDeg_Result>("GetProffesionRelatedDeg", professionIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetRegulatories(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRegulatories", organizationIDParameter);
        }
    
        public virtual int GetRegulatoryBodies(Nullable<int> organizationID, Nullable<int> isNewOrganization, string professionIDs)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var isNewOrganizationParameter = isNewOrganization.HasValue ?
                new ObjectParameter("IsNewOrganization", isNewOrganization) :
                new ObjectParameter("IsNewOrganization", typeof(int));
    
            var professionIDsParameter = professionIDs != null ?
                new ObjectParameter("ProfessionIDs", professionIDs) :
                new ObjectParameter("ProfessionIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRegulatoryBodies", organizationIDParameter, isNewOrganizationParameter, professionIDsParameter);
        }
    
        public virtual ObjectResult<GetUncompletedSurveys_Result> GetUncompletedSurveys(Nullable<long> personID, Nullable<int> oID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUncompletedSurveys_Result>("GetUncompletedSurveys", personIDParameter, oIDParameter);
        }
    
        public virtual ObjectResult<GetUpForSelectedOID_Result> GetUpForSelectedOID(Nullable<int> oid, Nullable<int> personid)
        {
            var oidParameter = oid.HasValue ?
                new ObjectParameter("oid", oid) :
                new ObjectParameter("oid", typeof(int));
    
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpForSelectedOID_Result>("GetUpForSelectedOID", oidParameter, personidParameter);
        }
    
        public virtual int HassanCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HassanCountries");
        }
    
        public virtual int InsertDocumentLicensing(Nullable<int> productID, Nullable<int> organizationID, Nullable<System.DateTime> lincenseExpirationDate, Nullable<System.DateTime> licenseOriginationDate, Nullable<decimal> feeOrigination, Nullable<decimal> feeAnnual, Nullable<decimal> feeTransactional, Nullable<int> accountRep)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var lincenseExpirationDateParameter = lincenseExpirationDate.HasValue ?
                new ObjectParameter("LincenseExpirationDate", lincenseExpirationDate) :
                new ObjectParameter("LincenseExpirationDate", typeof(System.DateTime));
    
            var licenseOriginationDateParameter = licenseOriginationDate.HasValue ?
                new ObjectParameter("LicenseOriginationDate", licenseOriginationDate) :
                new ObjectParameter("LicenseOriginationDate", typeof(System.DateTime));
    
            var feeOriginationParameter = feeOrigination.HasValue ?
                new ObjectParameter("FeeOrigination", feeOrigination) :
                new ObjectParameter("FeeOrigination", typeof(decimal));
    
            var feeAnnualParameter = feeAnnual.HasValue ?
                new ObjectParameter("FeeAnnual", feeAnnual) :
                new ObjectParameter("FeeAnnual", typeof(decimal));
    
            var feeTransactionalParameter = feeTransactional.HasValue ?
                new ObjectParameter("FeeTransactional", feeTransactional) :
                new ObjectParameter("FeeTransactional", typeof(decimal));
    
            var accountRepParameter = accountRep.HasValue ?
                new ObjectParameter("AccountRep", accountRep) :
                new ObjectParameter("AccountRep", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDocumentLicensing", productIDParameter, organizationIDParameter, lincenseExpirationDateParameter, licenseOriginationDateParameter, feeOriginationParameter, feeAnnualParameter, feeTransactionalParameter, accountRepParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOnlineCourse(Nullable<int> orgID, Nullable<int> facilityID, Nullable<bool> courseIsOnline, Nullable<bool> courseIsAssignedToConference, string roomNbr, Nullable<short> attendeeCapacity, Nullable<int> courseTopicID, Nullable<int> courseFocusID, Nullable<int> courseLearningOutcomeID, Nullable<int> courseEffectID, Nullable<int> courseEvaluationMethodID, Nullable<int> surveyID, Nullable<int> preSurveyID, string courseDescription, Nullable<System.DateTime> courseDate, Nullable<System.DateTime> courseStartTime, Nullable<System.DateTime> courseEndTime, Nullable<System.TimeSpan> offTaskMinutes, Nullable<System.DateTime> courseEnrollmentDeadline, Nullable<System.DateTime> credentialIssuanceDate, string promotionalurl, string filename, Nullable<int> personID, Nullable<int> views, Nullable<System.DateTime> postingDate)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var courseIsOnlineParameter = courseIsOnline.HasValue ?
                new ObjectParameter("CourseIsOnline", courseIsOnline) :
                new ObjectParameter("CourseIsOnline", typeof(bool));
    
            var courseIsAssignedToConferenceParameter = courseIsAssignedToConference.HasValue ?
                new ObjectParameter("CourseIsAssignedToConference", courseIsAssignedToConference) :
                new ObjectParameter("CourseIsAssignedToConference", typeof(bool));
    
            var roomNbrParameter = roomNbr != null ?
                new ObjectParameter("RoomNbr", roomNbr) :
                new ObjectParameter("RoomNbr", typeof(string));
    
            var attendeeCapacityParameter = attendeeCapacity.HasValue ?
                new ObjectParameter("AttendeeCapacity", attendeeCapacity) :
                new ObjectParameter("AttendeeCapacity", typeof(short));
    
            var courseTopicIDParameter = courseTopicID.HasValue ?
                new ObjectParameter("CourseTopicID", courseTopicID) :
                new ObjectParameter("CourseTopicID", typeof(int));
    
            var courseFocusIDParameter = courseFocusID.HasValue ?
                new ObjectParameter("CourseFocusID", courseFocusID) :
                new ObjectParameter("CourseFocusID", typeof(int));
    
            var courseLearningOutcomeIDParameter = courseLearningOutcomeID.HasValue ?
                new ObjectParameter("CourseLearningOutcomeID", courseLearningOutcomeID) :
                new ObjectParameter("CourseLearningOutcomeID", typeof(int));
    
            var courseEffectIDParameter = courseEffectID.HasValue ?
                new ObjectParameter("CourseEffectID", courseEffectID) :
                new ObjectParameter("CourseEffectID", typeof(int));
    
            var courseEvaluationMethodIDParameter = courseEvaluationMethodID.HasValue ?
                new ObjectParameter("CourseEvaluationMethodID", courseEvaluationMethodID) :
                new ObjectParameter("CourseEvaluationMethodID", typeof(int));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var preSurveyIDParameter = preSurveyID.HasValue ?
                new ObjectParameter("PreSurveyID", preSurveyID) :
                new ObjectParameter("PreSurveyID", typeof(int));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var courseDateParameter = courseDate.HasValue ?
                new ObjectParameter("CourseDate", courseDate) :
                new ObjectParameter("CourseDate", typeof(System.DateTime));
    
            var courseStartTimeParameter = courseStartTime.HasValue ?
                new ObjectParameter("CourseStartTime", courseStartTime) :
                new ObjectParameter("CourseStartTime", typeof(System.DateTime));
    
            var courseEndTimeParameter = courseEndTime.HasValue ?
                new ObjectParameter("CourseEndTime", courseEndTime) :
                new ObjectParameter("CourseEndTime", typeof(System.DateTime));
    
            var offTaskMinutesParameter = offTaskMinutes.HasValue ?
                new ObjectParameter("OffTaskMinutes", offTaskMinutes) :
                new ObjectParameter("OffTaskMinutes", typeof(System.TimeSpan));
    
            var courseEnrollmentDeadlineParameter = courseEnrollmentDeadline.HasValue ?
                new ObjectParameter("CourseEnrollmentDeadline", courseEnrollmentDeadline) :
                new ObjectParameter("CourseEnrollmentDeadline", typeof(System.DateTime));
    
            var credentialIssuanceDateParameter = credentialIssuanceDate.HasValue ?
                new ObjectParameter("CredentialIssuanceDate", credentialIssuanceDate) :
                new ObjectParameter("CredentialIssuanceDate", typeof(System.DateTime));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("Filename", filename) :
                new ObjectParameter("Filename", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var viewsParameter = views.HasValue ?
                new ObjectParameter("Views", views) :
                new ObjectParameter("Views", typeof(int));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOnlineCourse", orgIDParameter, facilityIDParameter, courseIsOnlineParameter, courseIsAssignedToConferenceParameter, roomNbrParameter, attendeeCapacityParameter, courseTopicIDParameter, courseFocusIDParameter, courseLearningOutcomeIDParameter, courseEffectIDParameter, courseEvaluationMethodIDParameter, surveyIDParameter, preSurveyIDParameter, courseDescriptionParameter, courseDateParameter, courseStartTimeParameter, courseEndTimeParameter, offTaskMinutesParameter, courseEnrollmentDeadlineParameter, credentialIssuanceDateParameter, promotionalurlParameter, filenameParameter, personIDParameter, viewsParameter, postingDateParameter);
        }
    
        public virtual int InsertOrganizationProfessions(Nullable<int> organizationID, Nullable<int> professionID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var professionIDParameter = professionID.HasValue ?
                new ObjectParameter("ProfessionID", professionID) :
                new ObjectParameter("ProfessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrganizationProfessions", organizationIDParameter, professionIDParameter);
        }
    
        public virtual ObjectResult<NewUserApproval_Result> NewUserApproval(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewUserApproval_Result>("NewUserApproval", organizationIDParameter);
        }
    
        public virtual int PersonProfessions(Nullable<int> personID, Nullable<int> professionID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var professionIDParameter = professionID.HasValue ?
                new ObjectParameter("ProfessionID", professionID) :
                new ObjectParameter("ProfessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonProfessions", personIDParameter, professionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PushEnrollmentConference(Nullable<int> confernceID, Nullable<long> personID, Nullable<int> paymentMethodID, string promoCode, Nullable<int> feeTypeID, string amount, Nullable<int> oID)
        {
            var confernceIDParameter = confernceID.HasValue ?
                new ObjectParameter("ConfernceID", confernceID) :
                new ObjectParameter("ConfernceID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PushEnrollmentConference", confernceIDParameter, personIDParameter, paymentMethodIDParameter, promoCodeParameter, feeTypeIDParameter, amountParameter, oIDParameter);
        }
    
        public virtual int PushEnrollmentStandaloneCourse(Nullable<int> courseID, Nullable<long> personID, Nullable<int> paymentMethodID, string promoCode, Nullable<int> feeTypeID, string amount, Nullable<int> oID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PushEnrollmentStandaloneCourse", courseIDParameter, personIDParameter, paymentMethodIDParameter, promoCodeParameter, feeTypeIDParameter, amountParameter, oIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RegisterUserBulk(Nullable<int> organizationID, string organizationGUID, string fName, string mName, string lName, string suffixID, string sexID, Nullable<System.DateTime> dateOfBirth, string uName, string secretQuestionID, string secretQuestionAnswer, string sSN, string eMailPersonal, string residence_StateID, string residence_MunicipalityID, string residence_StreetName, Nullable<int> residence_BuildingNumber, string mailing_Unit, string mailing_Zipcode, Nullable<bool> isMember, string memberID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var organizationGUIDParameter = organizationGUID != null ?
                new ObjectParameter("OrganizationGUID", organizationGUID) :
                new ObjectParameter("OrganizationGUID", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var suffixIDParameter = suffixID != null ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(string));
    
            var sexIDParameter = sexID != null ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var uNameParameter = uName != null ?
                new ObjectParameter("UName", uName) :
                new ObjectParameter("UName", typeof(string));
    
            var secretQuestionIDParameter = secretQuestionID != null ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(string));
    
            var secretQuestionAnswerParameter = secretQuestionAnswer != null ?
                new ObjectParameter("SecretQuestionAnswer", secretQuestionAnswer) :
                new ObjectParameter("SecretQuestionAnswer", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var eMailPersonalParameter = eMailPersonal != null ?
                new ObjectParameter("EMailPersonal", eMailPersonal) :
                new ObjectParameter("EMailPersonal", typeof(string));
    
            var residence_StateIDParameter = residence_StateID != null ?
                new ObjectParameter("Residence_StateID", residence_StateID) :
                new ObjectParameter("Residence_StateID", typeof(string));
    
            var residence_MunicipalityIDParameter = residence_MunicipalityID != null ?
                new ObjectParameter("Residence_MunicipalityID", residence_MunicipalityID) :
                new ObjectParameter("Residence_MunicipalityID", typeof(string));
    
            var residence_StreetNameParameter = residence_StreetName != null ?
                new ObjectParameter("Residence_StreetName", residence_StreetName) :
                new ObjectParameter("Residence_StreetName", typeof(string));
    
            var residence_BuildingNumberParameter = residence_BuildingNumber.HasValue ?
                new ObjectParameter("Residence_BuildingNumber", residence_BuildingNumber) :
                new ObjectParameter("Residence_BuildingNumber", typeof(int));
    
            var mailing_UnitParameter = mailing_Unit != null ?
                new ObjectParameter("Mailing_Unit", mailing_Unit) :
                new ObjectParameter("Mailing_Unit", typeof(string));
    
            var mailing_ZipcodeParameter = mailing_Zipcode != null ?
                new ObjectParameter("Mailing_Zipcode", mailing_Zipcode) :
                new ObjectParameter("Mailing_Zipcode", typeof(string));
    
            var isMemberParameter = isMember.HasValue ?
                new ObjectParameter("IsMember", isMember) :
                new ObjectParameter("IsMember", typeof(bool));
    
            var memberIDParameter = memberID != null ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RegisterUserBulk", organizationIDParameter, organizationGUIDParameter, fNameParameter, mNameParameter, lNameParameter, suffixIDParameter, sexIDParameter, dateOfBirthParameter, uNameParameter, secretQuestionIDParameter, secretQuestionAnswerParameter, sSNParameter, eMailPersonalParameter, residence_StateIDParameter, residence_MunicipalityIDParameter, residence_StreetNameParameter, residence_BuildingNumberParameter, mailing_UnitParameter, mailing_ZipcodeParameter, isMemberParameter, memberIDParameter);
        }
    
        public virtual int SaveVideoHistory(Nullable<int> personID, Nullable<int> oID, string videoName, string location)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var videoNameParameter = videoName != null ?
                new ObjectParameter("VideoName", videoName) :
                new ObjectParameter("VideoName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveVideoHistory", personIDParameter, oIDParameter, videoNameParameter, locationParameter);
        }
    
        public virtual ObjectResult<sp_AllFacilities_Get_Result> sp_AllFacilities_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AllFacilities_Get_Result>("sp_AllFacilities_Get");
        }
    
        public virtual ObjectResult<sp_AllPresentersList_Get_Result> sp_AllPresentersList_Get(Nullable<int> oID)
        {
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AllPresentersList_Get_Result>("sp_AllPresentersList_Get", oIDParameter);
        }
    
        public virtual ObjectResult<sp_AllQuestionsWithOrderbySurveyID_Get_Result> sp_AllQuestionsWithOrderbySurveyID_Get(Nullable<int> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AllQuestionsWithOrderbySurveyID_Get_Result>("sp_AllQuestionsWithOrderbySurveyID_Get", surveyIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_AssignQuestionToSurvey_Insert(Nullable<int> surveyID, Nullable<int> questionID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AssignQuestionToSurvey_Insert", surveyIDParameter, questionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CanPersonEnrollInConference(Nullable<int> conferenceId, Nullable<long> personId)
        {
            var conferenceIdParameter = conferenceId.HasValue ?
                new ObjectParameter("ConferenceId", conferenceId) :
                new ObjectParameter("ConferenceId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CanPersonEnrollInConference", conferenceIdParameter, personIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_CanPersonEnrollInCourse(Nullable<int> courseId, Nullable<long> personId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_CanPersonEnrollInCourse", courseIdParameter, personIdParameter);
        }
    
        public virtual int sp_CeuCertificateDownload_InsertUpdate(Nullable<int> personID, Nullable<int> courseID, string activityNbr)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var activityNbrParameter = activityNbr != null ?
                new ObjectParameter("ActivityNbr", activityNbr) :
                new ObjectParameter("ActivityNbr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CeuCertificateDownload_InsertUpdate", personIDParameter, courseIDParameter, activityNbrParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_checkIsPersonPresneter(Nullable<int> personID, Nullable<int> oID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_checkIsPersonPresneter", personIDParameter, oIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Conference_Insert(string conferenceName, Nullable<int> conferenceOrganizationID, Nullable<int> facilityStateID, Nullable<int> facilityMunicipilityID, Nullable<int> facilityID, string comments, Nullable<System.DateTime> enrollmentDeadline, Nullable<System.DateTime> credentialIssuanceDate, string promotionalurl, Nullable<System.DateTime> postingDate)
        {
            var conferenceNameParameter = conferenceName != null ?
                new ObjectParameter("ConferenceName", conferenceName) :
                new ObjectParameter("ConferenceName", typeof(string));
    
            var conferenceOrganizationIDParameter = conferenceOrganizationID.HasValue ?
                new ObjectParameter("ConferenceOrganizationID", conferenceOrganizationID) :
                new ObjectParameter("ConferenceOrganizationID", typeof(int));
    
            var facilityStateIDParameter = facilityStateID.HasValue ?
                new ObjectParameter("FacilityStateID", facilityStateID) :
                new ObjectParameter("FacilityStateID", typeof(int));
    
            var facilityMunicipilityIDParameter = facilityMunicipilityID.HasValue ?
                new ObjectParameter("FacilityMunicipilityID", facilityMunicipilityID) :
                new ObjectParameter("FacilityMunicipilityID", typeof(int));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var enrollmentDeadlineParameter = enrollmentDeadline.HasValue ?
                new ObjectParameter("EnrollmentDeadline", enrollmentDeadline) :
                new ObjectParameter("EnrollmentDeadline", typeof(System.DateTime));
    
            var credentialIssuanceDateParameter = credentialIssuanceDate.HasValue ?
                new ObjectParameter("CredentialIssuanceDate", credentialIssuanceDate) :
                new ObjectParameter("CredentialIssuanceDate", typeof(System.DateTime));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Conference_Insert", conferenceNameParameter, conferenceOrganizationIDParameter, facilityStateIDParameter, facilityMunicipilityIDParameter, facilityIDParameter, commentsParameter, enrollmentDeadlineParameter, credentialIssuanceDateParameter, promotionalurlParameter, postingDateParameter);
        }
    
        public virtual int SP_Conference_Update(Nullable<int> conferenceID, string conferenceName, Nullable<int> conferenceOrganizationID, Nullable<int> facilityStateID, Nullable<int> facilityMunicipilityID, Nullable<int> facilityID, string comments, Nullable<System.DateTime> enrollmentDeadline, Nullable<System.DateTime> credentialIssuanceDate, string promotionalurl, Nullable<System.DateTime> postingDate)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var conferenceNameParameter = conferenceName != null ?
                new ObjectParameter("ConferenceName", conferenceName) :
                new ObjectParameter("ConferenceName", typeof(string));
    
            var conferenceOrganizationIDParameter = conferenceOrganizationID.HasValue ?
                new ObjectParameter("ConferenceOrganizationID", conferenceOrganizationID) :
                new ObjectParameter("ConferenceOrganizationID", typeof(int));
    
            var facilityStateIDParameter = facilityStateID.HasValue ?
                new ObjectParameter("FacilityStateID", facilityStateID) :
                new ObjectParameter("FacilityStateID", typeof(int));
    
            var facilityMunicipilityIDParameter = facilityMunicipilityID.HasValue ?
                new ObjectParameter("FacilityMunicipilityID", facilityMunicipilityID) :
                new ObjectParameter("FacilityMunicipilityID", typeof(int));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var enrollmentDeadlineParameter = enrollmentDeadline.HasValue ?
                new ObjectParameter("EnrollmentDeadline", enrollmentDeadline) :
                new ObjectParameter("EnrollmentDeadline", typeof(System.DateTime));
    
            var credentialIssuanceDateParameter = credentialIssuanceDate.HasValue ?
                new ObjectParameter("CredentialIssuanceDate", credentialIssuanceDate) :
                new ObjectParameter("CredentialIssuanceDate", typeof(System.DateTime));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Conference_Update", conferenceIDParameter, conferenceNameParameter, conferenceOrganizationIDParameter, facilityStateIDParameter, facilityMunicipilityIDParameter, facilityIDParameter, commentsParameter, enrollmentDeadlineParameter, credentialIssuanceDateParameter, promotionalurlParameter, postingDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ConferenceAssocaiatedCourse_Insert(Nullable<int> orgID, Nullable<int> conferenceID, Nullable<int> surveyID, Nullable<int> preSurveyID, Nullable<bool> courseIsOnline, Nullable<bool> courseIsAssignedToConference, string roomNbr, Nullable<int> attendeeCapacity, Nullable<int> courseTopicID, Nullable<int> courseFocusID, Nullable<int> courseLearningOutcomeID, Nullable<int> courseEffectID, Nullable<int> courseEvaluationMethodID, string courseDescription, Nullable<System.DateTime> courseDate, Nullable<System.TimeSpan> courseStartTime, Nullable<System.TimeSpan> courseEndTime, Nullable<System.TimeSpan> courseMinusOffTask, string promotionalurl)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var preSurveyIDParameter = preSurveyID.HasValue ?
                new ObjectParameter("PreSurveyID", preSurveyID) :
                new ObjectParameter("PreSurveyID", typeof(int));
    
            var courseIsOnlineParameter = courseIsOnline.HasValue ?
                new ObjectParameter("CourseIsOnline", courseIsOnline) :
                new ObjectParameter("CourseIsOnline", typeof(bool));
    
            var courseIsAssignedToConferenceParameter = courseIsAssignedToConference.HasValue ?
                new ObjectParameter("CourseIsAssignedToConference", courseIsAssignedToConference) :
                new ObjectParameter("CourseIsAssignedToConference", typeof(bool));
    
            var roomNbrParameter = roomNbr != null ?
                new ObjectParameter("RoomNbr", roomNbr) :
                new ObjectParameter("RoomNbr", typeof(string));
    
            var attendeeCapacityParameter = attendeeCapacity.HasValue ?
                new ObjectParameter("AttendeeCapacity", attendeeCapacity) :
                new ObjectParameter("AttendeeCapacity", typeof(int));
    
            var courseTopicIDParameter = courseTopicID.HasValue ?
                new ObjectParameter("CourseTopicID", courseTopicID) :
                new ObjectParameter("CourseTopicID", typeof(int));
    
            var courseFocusIDParameter = courseFocusID.HasValue ?
                new ObjectParameter("CourseFocusID", courseFocusID) :
                new ObjectParameter("CourseFocusID", typeof(int));
    
            var courseLearningOutcomeIDParameter = courseLearningOutcomeID.HasValue ?
                new ObjectParameter("CourseLearningOutcomeID", courseLearningOutcomeID) :
                new ObjectParameter("CourseLearningOutcomeID", typeof(int));
    
            var courseEffectIDParameter = courseEffectID.HasValue ?
                new ObjectParameter("CourseEffectID", courseEffectID) :
                new ObjectParameter("CourseEffectID", typeof(int));
    
            var courseEvaluationMethodIDParameter = courseEvaluationMethodID.HasValue ?
                new ObjectParameter("CourseEvaluationMethodID", courseEvaluationMethodID) :
                new ObjectParameter("CourseEvaluationMethodID", typeof(int));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var courseDateParameter = courseDate.HasValue ?
                new ObjectParameter("CourseDate", courseDate) :
                new ObjectParameter("CourseDate", typeof(System.DateTime));
    
            var courseStartTimeParameter = courseStartTime.HasValue ?
                new ObjectParameter("CourseStartTime", courseStartTime) :
                new ObjectParameter("CourseStartTime", typeof(System.TimeSpan));
    
            var courseEndTimeParameter = courseEndTime.HasValue ?
                new ObjectParameter("CourseEndTime", courseEndTime) :
                new ObjectParameter("CourseEndTime", typeof(System.TimeSpan));
    
            var courseMinusOffTaskParameter = courseMinusOffTask.HasValue ?
                new ObjectParameter("CourseMinusOffTask", courseMinusOffTask) :
                new ObjectParameter("CourseMinusOffTask", typeof(System.TimeSpan));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ConferenceAssocaiatedCourse_Insert", orgIDParameter, conferenceIDParameter, surveyIDParameter, preSurveyIDParameter, courseIsOnlineParameter, courseIsAssignedToConferenceParameter, roomNbrParameter, attendeeCapacityParameter, courseTopicIDParameter, courseFocusIDParameter, courseLearningOutcomeIDParameter, courseEffectIDParameter, courseEvaluationMethodIDParameter, courseDescriptionParameter, courseDateParameter, courseStartTimeParameter, courseEndTimeParameter, courseMinusOffTaskParameter, promotionalurlParameter);
        }
    
        public virtual ObjectResult<sp_ConferenceData_Get_Result> sp_ConferenceData_Get(Nullable<int> conferenceID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ConferenceData_Get_Result>("sp_ConferenceData_Get", conferenceIDParameter);
        }
    
        public virtual int SP_ConferenceDate_Delete(Nullable<int> conferenceID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ConferenceDate_Delete", conferenceIDParameter);
        }
    
        public virtual int SP_ConferenceDate_Insert(Nullable<int> conferenceID, Nullable<System.DateTime> conferenceDate, Nullable<int> dateType)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var conferenceDateParameter = conferenceDate.HasValue ?
                new ObjectParameter("ConferenceDate", conferenceDate) :
                new ObjectParameter("ConferenceDate", typeof(System.DateTime));
    
            var dateTypeParameter = dateType.HasValue ?
                new ObjectParameter("DateType", dateType) :
                new ObjectParameter("DateType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ConferenceDate_Insert", conferenceIDParameter, conferenceDateParameter, dateTypeParameter);
        }
    
        public virtual int SP_ConferenceDate_Update(Nullable<int> conferenceID, Nullable<System.DateTime> conferenceDate, Nullable<int> dateType)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var conferenceDateParameter = conferenceDate.HasValue ?
                new ObjectParameter("ConferenceDate", conferenceDate) :
                new ObjectParameter("ConferenceDate", typeof(System.DateTime));
    
            var dateTypeParameter = dateType.HasValue ?
                new ObjectParameter("DateType", dateType) :
                new ObjectParameter("DateType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ConferenceDate_Update", conferenceIDParameter, conferenceDateParameter, dateTypeParameter);
        }
    
        public virtual ObjectResult<sp_ConferenceDates_Get_Result> sp_ConferenceDates_Get(Nullable<int> conferenceID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ConferenceDates_Get_Result>("sp_ConferenceDates_Get", conferenceIDParameter);
        }
    
        public virtual ObjectResult<Sp_ConferenceFacilities_Get_Result> Sp_ConferenceFacilities_Get(Nullable<int> municipalityId, Nullable<bool> includeElementarySecondarySchools, Nullable<bool> includePostSecondarySchools, Nullable<bool> includeHotelsConferenceCenters)
        {
            var municipalityIdParameter = municipalityId.HasValue ?
                new ObjectParameter("MunicipalityId", municipalityId) :
                new ObjectParameter("MunicipalityId", typeof(int));
    
            var includeElementarySecondarySchoolsParameter = includeElementarySecondarySchools.HasValue ?
                new ObjectParameter("IncludeElementarySecondarySchools", includeElementarySecondarySchools) :
                new ObjectParameter("IncludeElementarySecondarySchools", typeof(bool));
    
            var includePostSecondarySchoolsParameter = includePostSecondarySchools.HasValue ?
                new ObjectParameter("IncludePostSecondarySchools", includePostSecondarySchools) :
                new ObjectParameter("IncludePostSecondarySchools", typeof(bool));
    
            var includeHotelsConferenceCentersParameter = includeHotelsConferenceCenters.HasValue ?
                new ObjectParameter("IncludeHotelsConferenceCenters", includeHotelsConferenceCenters) :
                new ObjectParameter("IncludeHotelsConferenceCenters", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ConferenceFacilities_Get_Result>("Sp_ConferenceFacilities_Get", municipalityIdParameter, includeElementarySecondarySchoolsParameter, includePostSecondarySchoolsParameter, includeHotelsConferenceCentersParameter);
        }
    
        public virtual int SP_ConferenceFeeMetrix_Delete(Nullable<int> conferenceID, Nullable<int> sponsorOrganizationID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var sponsorOrganizationIDParameter = sponsorOrganizationID.HasValue ?
                new ObjectParameter("SponsorOrganizationID", sponsorOrganizationID) :
                new ObjectParameter("SponsorOrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ConferenceFeeMetrix_Delete", conferenceIDParameter, sponsorOrganizationIDParameter);
        }
    
        public virtual int SP_ConferenceFeeMetrix_Insert(Nullable<int> conferenceID, Nullable<int> sponsorOrganizationID, string promoCode, Nullable<decimal> advanceEnrollmentFee, Nullable<decimal> memberAdvanceEnrollmentFee, Nullable<decimal> lateEnrollmentFee, Nullable<bool> isPrimarySponsor, Nullable<bool> isApproved)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var sponsorOrganizationIDParameter = sponsorOrganizationID.HasValue ?
                new ObjectParameter("SponsorOrganizationID", sponsorOrganizationID) :
                new ObjectParameter("SponsorOrganizationID", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var advanceEnrollmentFeeParameter = advanceEnrollmentFee.HasValue ?
                new ObjectParameter("AdvanceEnrollmentFee", advanceEnrollmentFee) :
                new ObjectParameter("AdvanceEnrollmentFee", typeof(decimal));
    
            var memberAdvanceEnrollmentFeeParameter = memberAdvanceEnrollmentFee.HasValue ?
                new ObjectParameter("MemberAdvanceEnrollmentFee", memberAdvanceEnrollmentFee) :
                new ObjectParameter("MemberAdvanceEnrollmentFee", typeof(decimal));
    
            var lateEnrollmentFeeParameter = lateEnrollmentFee.HasValue ?
                new ObjectParameter("LateEnrollmentFee", lateEnrollmentFee) :
                new ObjectParameter("LateEnrollmentFee", typeof(decimal));
    
            var isPrimarySponsorParameter = isPrimarySponsor.HasValue ?
                new ObjectParameter("IsPrimarySponsor", isPrimarySponsor) :
                new ObjectParameter("IsPrimarySponsor", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ConferenceFeeMetrix_Insert", conferenceIDParameter, sponsorOrganizationIDParameter, promoCodeParameter, advanceEnrollmentFeeParameter, memberAdvanceEnrollmentFeeParameter, lateEnrollmentFeeParameter, isPrimarySponsorParameter, isApprovedParameter);
        }
    
        public virtual int SP_ConferenceFeeMetrix_Update(Nullable<int> conferenceID, Nullable<int> feeMasterId, Nullable<int> sponsorOrganizationID, string promoCode, Nullable<decimal> advanceEnrollmentFee, Nullable<decimal> memberAdvanceEnrollmentFee, Nullable<decimal> lateEnrollmentFee, Nullable<bool> isPrimarySponsor)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var feeMasterIdParameter = feeMasterId.HasValue ?
                new ObjectParameter("FeeMasterId", feeMasterId) :
                new ObjectParameter("FeeMasterId", typeof(int));
    
            var sponsorOrganizationIDParameter = sponsorOrganizationID.HasValue ?
                new ObjectParameter("SponsorOrganizationID", sponsorOrganizationID) :
                new ObjectParameter("SponsorOrganizationID", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var advanceEnrollmentFeeParameter = advanceEnrollmentFee.HasValue ?
                new ObjectParameter("AdvanceEnrollmentFee", advanceEnrollmentFee) :
                new ObjectParameter("AdvanceEnrollmentFee", typeof(decimal));
    
            var memberAdvanceEnrollmentFeeParameter = memberAdvanceEnrollmentFee.HasValue ?
                new ObjectParameter("MemberAdvanceEnrollmentFee", memberAdvanceEnrollmentFee) :
                new ObjectParameter("MemberAdvanceEnrollmentFee", typeof(decimal));
    
            var lateEnrollmentFeeParameter = lateEnrollmentFee.HasValue ?
                new ObjectParameter("LateEnrollmentFee", lateEnrollmentFee) :
                new ObjectParameter("LateEnrollmentFee", typeof(decimal));
    
            var isPrimarySponsorParameter = isPrimarySponsor.HasValue ?
                new ObjectParameter("IsPrimarySponsor", isPrimarySponsor) :
                new ObjectParameter("IsPrimarySponsor", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ConferenceFeeMetrix_Update", conferenceIDParameter, feeMasterIdParameter, sponsorOrganizationIDParameter, promoCodeParameter, advanceEnrollmentFeeParameter, memberAdvanceEnrollmentFeeParameter, lateEnrollmentFeeParameter, isPrimarySponsorParameter);
        }
    
        public virtual ObjectResult<sp_ConferenceSponsorOrganization_Get_Result> sp_ConferenceSponsorOrganization_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ConferenceSponsorOrganization_Get_Result>("sp_ConferenceSponsorOrganization_Get");
        }
    
        public virtual int sp_ConfernceAssociatedCourseInformation_Update(Nullable<int> courseID, Nullable<int> conferenceID, Nullable<int> surveyID, Nullable<int> preSurveyID, Nullable<bool> courseIsOnline, string roomNbr, Nullable<int> attendeeCapacity, Nullable<int> courseTopicID, Nullable<int> courseFocusID, Nullable<int> courseLearningOutcomeID, Nullable<int> courseEffectID, Nullable<int> courseEvaluationMethodID, string courseDescription, Nullable<System.DateTime> courseDate, Nullable<System.TimeSpan> courseStartTime, Nullable<System.TimeSpan> courseEndTime, Nullable<System.TimeSpan> courseMinusOffTask, string promotionalurl)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var preSurveyIDParameter = preSurveyID.HasValue ?
                new ObjectParameter("PreSurveyID", preSurveyID) :
                new ObjectParameter("PreSurveyID", typeof(int));
    
            var courseIsOnlineParameter = courseIsOnline.HasValue ?
                new ObjectParameter("CourseIsOnline", courseIsOnline) :
                new ObjectParameter("CourseIsOnline", typeof(bool));
    
            var roomNbrParameter = roomNbr != null ?
                new ObjectParameter("RoomNbr", roomNbr) :
                new ObjectParameter("RoomNbr", typeof(string));
    
            var attendeeCapacityParameter = attendeeCapacity.HasValue ?
                new ObjectParameter("AttendeeCapacity", attendeeCapacity) :
                new ObjectParameter("AttendeeCapacity", typeof(int));
    
            var courseTopicIDParameter = courseTopicID.HasValue ?
                new ObjectParameter("CourseTopicID", courseTopicID) :
                new ObjectParameter("CourseTopicID", typeof(int));
    
            var courseFocusIDParameter = courseFocusID.HasValue ?
                new ObjectParameter("CourseFocusID", courseFocusID) :
                new ObjectParameter("CourseFocusID", typeof(int));
    
            var courseLearningOutcomeIDParameter = courseLearningOutcomeID.HasValue ?
                new ObjectParameter("CourseLearningOutcomeID", courseLearningOutcomeID) :
                new ObjectParameter("CourseLearningOutcomeID", typeof(int));
    
            var courseEffectIDParameter = courseEffectID.HasValue ?
                new ObjectParameter("CourseEffectID", courseEffectID) :
                new ObjectParameter("CourseEffectID", typeof(int));
    
            var courseEvaluationMethodIDParameter = courseEvaluationMethodID.HasValue ?
                new ObjectParameter("CourseEvaluationMethodID", courseEvaluationMethodID) :
                new ObjectParameter("CourseEvaluationMethodID", typeof(int));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var courseDateParameter = courseDate.HasValue ?
                new ObjectParameter("CourseDate", courseDate) :
                new ObjectParameter("CourseDate", typeof(System.DateTime));
    
            var courseStartTimeParameter = courseStartTime.HasValue ?
                new ObjectParameter("CourseStartTime", courseStartTime) :
                new ObjectParameter("CourseStartTime", typeof(System.TimeSpan));
    
            var courseEndTimeParameter = courseEndTime.HasValue ?
                new ObjectParameter("CourseEndTime", courseEndTime) :
                new ObjectParameter("CourseEndTime", typeof(System.TimeSpan));
    
            var courseMinusOffTaskParameter = courseMinusOffTask.HasValue ?
                new ObjectParameter("CourseMinusOffTask", courseMinusOffTask) :
                new ObjectParameter("CourseMinusOffTask", typeof(System.TimeSpan));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ConfernceAssociatedCourseInformation_Update", courseIDParameter, conferenceIDParameter, surveyIDParameter, preSurveyIDParameter, courseIsOnlineParameter, roomNbrParameter, attendeeCapacityParameter, courseTopicIDParameter, courseFocusIDParameter, courseLearningOutcomeIDParameter, courseEffectIDParameter, courseEvaluationMethodIDParameter, courseDescriptionParameter, courseDateParameter, courseStartTimeParameter, courseEndTimeParameter, courseMinusOffTaskParameter, promotionalurlParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ConfernceCourseEnrollemnt_insert(Nullable<int> confernceID, Nullable<long> personID, Nullable<int> paymentMethodID, string promoCode, Nullable<int> feeTypeID, string amount, Nullable<int> oID)
        {
            var confernceIDParameter = confernceID.HasValue ?
                new ObjectParameter("ConfernceID", confernceID) :
                new ObjectParameter("ConfernceID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ConfernceCourseEnrollemnt_insert", confernceIDParameter, personIDParameter, paymentMethodIDParameter, promoCodeParameter, feeTypeIDParameter, amountParameter, oIDParameter);
        }
    
        public virtual ObjectResult<Sp_Confernces_Get_Result> Sp_Confernces_Get(Nullable<int> oID)
        {
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Confernces_Get_Result>("Sp_Confernces_Get", oIDParameter);
        }
    
        public virtual ObjectResult<Sp_CourseEffects_Get_Result> Sp_CourseEffects_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CourseEffects_Get_Result>("Sp_CourseEffects_Get");
        }
    
        public virtual ObjectResult<Sp_CourseEvaluation_Get_Result> Sp_CourseEvaluation_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CourseEvaluation_Get_Result>("Sp_CourseEvaluation_Get");
        }
    
        public virtual ObjectResult<sp_CourseEvaluationMethod_Get_Result> sp_CourseEvaluationMethod_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CourseEvaluationMethod_Get_Result>("sp_CourseEvaluationMethod_Get");
        }
    
        public virtual int sp_CourseFeeMatrix_Delete(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CourseFeeMatrix_Delete", courseIDParameter);
        }
    
        public virtual ObjectResult<Sp_CourseFocuses_Get_Result> Sp_CourseFocuses_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CourseFocuses_Get_Result>("Sp_CourseFocuses_Get");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CourseHasAnySurvey_Get(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CourseHasAnySurvey_Get", courseIDParameter);
        }
    
        public virtual int sp_CourseIssuers_Insert(Nullable<int> courseID, Nullable<int> issuerID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("IssuerID", issuerID) :
                new ObjectParameter("IssuerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CourseIssuers_Insert", courseIDParameter, issuerIDParameter);
        }
    
        public virtual ObjectResult<Sp_CourseLearningOutcomes_Get_Result> Sp_CourseLearningOutcomes_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CourseLearningOutcomes_Get_Result>("Sp_CourseLearningOutcomes_Get");
        }
    
        public virtual int sp_CoursePresenter_Insert(Nullable<int> courseID, Nullable<int> presenterID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var presenterIDParameter = presenterID.HasValue ?
                new ObjectParameter("PresenterID", presenterID) :
                new ObjectParameter("PresenterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CoursePresenter_Insert", courseIDParameter, presenterIDParameter);
        }
    
        public virtual ObjectResult<Sp_CourseSurvey_Get_Result> Sp_CourseSurvey_Get(Nullable<int> organziationID)
        {
            var organziationIDParameter = organziationID.HasValue ?
                new ObjectParameter("OrganziationID", organziationID) :
                new ObjectParameter("OrganziationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CourseSurvey_Get_Result>("Sp_CourseSurvey_Get", organziationIDParameter);
        }
    
        public virtual ObjectResult<Sp_CourseTopics_Get_Result> Sp_CourseTopics_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CourseTopics_Get_Result>("Sp_CourseTopics_Get");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Credential_Phrase_Counts(Nullable<bool> hasBeenIssued)
        {
            var hasBeenIssuedParameter = hasBeenIssued.HasValue ?
                new ObjectParameter("HasBeenIssued", hasBeenIssued) :
                new ObjectParameter("HasBeenIssued", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Credential_Phrase_Counts", hasBeenIssuedParameter);
        }
    
        public virtual int sp_Credential_Phrase_Insert(string credentialPhrase)
        {
            var credentialPhraseParameter = credentialPhrase != null ?
                new ObjectParameter("CredentialPhrase", credentialPhrase) :
                new ObjectParameter("CredentialPhrase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Credential_Phrase_Insert", credentialPhraseParameter);
        }
    
        public virtual int sp_Current_User_Insert(Nullable<int> personOrganizationRoleID, Nullable<System.Guid> sessionGuid, ObjectParameter currentUserID)
        {
            var personOrganizationRoleIDParameter = personOrganizationRoleID.HasValue ?
                new ObjectParameter("PersonOrganizationRoleID", personOrganizationRoleID) :
                new ObjectParameter("PersonOrganizationRoleID", typeof(int));
    
            var sessionGuidParameter = sessionGuid.HasValue ?
                new ObjectParameter("SessionGuid", sessionGuid) :
                new ObjectParameter("SessionGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Current_User_Insert", personOrganizationRoleIDParameter, sessionGuidParameter, currentUserID);
        }
    
        public virtual int sp_DeleteCourseAttendanceOfPerson_Delete(Nullable<int> enrollmentMasterID)
        {
            var enrollmentMasterIDParameter = enrollmentMasterID.HasValue ?
                new ObjectParameter("EnrollmentMasterID", enrollmentMasterID) :
                new ObjectParameter("EnrollmentMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCourseAttendanceOfPerson_Delete", enrollmentMasterIDParameter);
        }
    
        public virtual int sp_DeleteCourseIssuers_Delete(Nullable<int> courseID, Nullable<int> issuerID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("IssuerID", issuerID) :
                new ObjectParameter("IssuerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCourseIssuers_Delete", courseIDParameter, issuerIDParameter);
        }
    
        public virtual int sp_DeleteCoursePresenter_Delete(Nullable<int> courseID, Nullable<int> presenterID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var presenterIDParameter = presenterID.HasValue ?
                new ObjectParameter("PresenterID", presenterID) :
                new ObjectParameter("PresenterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCoursePresenter_Delete", courseIDParameter, presenterIDParameter);
        }
    
        public virtual int sp_DeleteEvents(Nullable<int> eventID, string eventType)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteEvents", eventIDParameter, eventTypeParameter);
        }
    
        public virtual int sp_DeletefileInfo(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeletefileInfo", iDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_FacilityDetail_Get_Result> sp_FacilityDetail_Get(Nullable<int> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FacilityDetail_Get_Result>("sp_FacilityDetail_Get", facilityIDParameter);
        }
    
        public virtual ObjectResult<string> sp_GeneratePassword_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GeneratePassword_Get");
        }
    
        public virtual ObjectResult<string> sp_GeneratePromoCode_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GeneratePromoCode_Get");
        }
    
        public virtual ObjectResult<string> sp_GenerateUserID_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GenerateUserID_Get");
        }
    
        public virtual ObjectResult<Sp_Get_ActiveCountries_Result> Sp_Get_ActiveCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_ActiveCountries_Result>("Sp_Get_ActiveCountries");
        }
    
        public virtual ObjectResult<SP_Get_ActiveState_Result> SP_Get_ActiveState(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Get_ActiveState_Result>("SP_Get_ActiveState", countryIDParameter);
        }
    
        public virtual ObjectResult<Sp_Get_CEUIssuers_Result> Sp_Get_CEUIssuers(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_CEUIssuers_Result>("Sp_Get_CEUIssuers", courseIDParameter);
        }
    
        public virtual ObjectResult<Sp_Get_CityByStateID_Result> Sp_Get_CityByStateID(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_CityByStateID_Result>("Sp_Get_CityByStateID", stateIDParameter);
        }
    
        public virtual ObjectResult<Sp_Get_Course_Result> Sp_Get_Course(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_Course_Result>("Sp_Get_Course", courseIDParameter);
        }
    
        public virtual ObjectResult<Sp_Get_CoursePresenters_Result> Sp_Get_CoursePresenters(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_CoursePresenters_Result>("Sp_Get_CoursePresenters", courseIDParameter);
        }
    
        public virtual ObjectResult<sp_Get_Courses_Result> sp_Get_Courses(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Courses_Result>("sp_Get_Courses", organizationIDParameter);
        }
    
        public virtual ObjectResult<sp_Get_CoursesListByPersonID_Result> sp_Get_CoursesListByPersonID(Nullable<long> personID, Nullable<int> oID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_CoursesListByPersonID_Result>("sp_Get_CoursesListByPersonID", personIDParameter, oIDParameter);
        }
    
        public virtual ObjectResult<Sp_Get_CourseSponsors_Result> Sp_Get_CourseSponsors(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_CourseSponsors_Result>("Sp_Get_CourseSponsors", courseIDParameter);
        }
    
        public virtual ObjectResult<string> sp_Get_Credential_Phrase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Get_Credential_Phrase");
        }
    
        public virtual int Sp_Get_Facilities(Nullable<int> municipalityId, Nullable<bool> includeElementarySecondarySchools, Nullable<bool> includePostSecondarySchools, Nullable<bool> includeHotelsConferenceCenters)
        {
            var municipalityIdParameter = municipalityId.HasValue ?
                new ObjectParameter("MunicipalityId", municipalityId) :
                new ObjectParameter("MunicipalityId", typeof(int));
    
            var includeElementarySecondarySchoolsParameter = includeElementarySecondarySchools.HasValue ?
                new ObjectParameter("IncludeElementarySecondarySchools", includeElementarySecondarySchools) :
                new ObjectParameter("IncludeElementarySecondarySchools", typeof(bool));
    
            var includePostSecondarySchoolsParameter = includePostSecondarySchools.HasValue ?
                new ObjectParameter("IncludePostSecondarySchools", includePostSecondarySchools) :
                new ObjectParameter("IncludePostSecondarySchools", typeof(bool));
    
            var includeHotelsConferenceCentersParameter = includeHotelsConferenceCenters.HasValue ?
                new ObjectParameter("IncludeHotelsConferenceCenters", includeHotelsConferenceCenters) :
                new ObjectParameter("IncludeHotelsConferenceCenters", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Get_Facilities", municipalityIdParameter, includeElementarySecondarySchoolsParameter, includePostSecondarySchoolsParameter, includeHotelsConferenceCentersParameter);
        }
    
        public virtual ObjectResult<sp_Get_OpenedCourses_Result> sp_Get_OpenedCourses(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_OpenedCourses_Result>("sp_Get_OpenedCourses", organizationIDParameter);
        }
    
        public virtual ObjectResult<sp_Get_OrganizationByGUID_Result> sp_Get_OrganizationByGUID(Nullable<System.Guid> organizationGUID)
        {
            var organizationGUIDParameter = organizationGUID.HasValue ?
                new ObjectParameter("OrganizationGUID", organizationGUID) :
                new ObjectParameter("OrganizationGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_OrganizationByGUID_Result>("sp_Get_OrganizationByGUID", organizationGUIDParameter);
        }
    
        public virtual ObjectResult<string> sp_Get_OrganizationNameByCode(string organizationID)
        {
            var organizationIDParameter = organizationID != null ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Get_OrganizationNameByCode", organizationIDParameter);
        }
    
        public virtual ObjectResult<string> sp_Get_OrganizationNameById(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Get_OrganizationNameById", organizationIDParameter);
        }
    
        public virtual ObjectResult<sp_Get_PresenterCoursesListByPersonID_Result> sp_Get_PresenterCoursesListByPersonID(Nullable<long> personID, Nullable<int> oID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_PresenterCoursesListByPersonID_Result>("sp_Get_PresenterCoursesListByPersonID", personIDParameter, oIDParameter);
        }
    
        public virtual ObjectResult<sp_Get_Roles_Result> sp_Get_Roles(Nullable<int> roleTypeID)
        {
            var roleTypeIDParameter = roleTypeID.HasValue ?
                new ObjectParameter("RoleTypeID", roleTypeID) :
                new ObjectParameter("RoleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Roles_Result>("sp_Get_Roles", roleTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_Get_SecretQuestions_Result> sp_Get_SecretQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_SecretQuestions_Result>("sp_Get_SecretQuestions");
        }
    
        public virtual ObjectResult<sp_Get_Sex_Result> sp_Get_Sex()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Sex_Result>("sp_Get_Sex");
        }
    
        public virtual ObjectResult<Sp_Get_SponsorFees_Result> Sp_Get_SponsorFees(Nullable<int> feeMasterID)
        {
            var feeMasterIDParameter = feeMasterID.HasValue ?
                new ObjectParameter("FeeMasterID", feeMasterID) :
                new ObjectParameter("FeeMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_SponsorFees_Result>("Sp_Get_SponsorFees", feeMasterIDParameter);
        }
    
        public virtual ObjectResult<sp_Get_Suffixes_Result> sp_Get_Suffixes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Suffixes_Result>("sp_Get_Suffixes");
        }
    
        public virtual ObjectResult<sp_Get_User_Credentials_Result> sp_Get_User_Credentials(Nullable<System.Guid> sessionGUID)
        {
            var sessionGUIDParameter = sessionGUID.HasValue ?
                new ObjectParameter("SessionGUID", sessionGUID) :
                new ObjectParameter("SessionGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_User_Credentials_Result>("sp_Get_User_Credentials", sessionGUIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAccountRepOrg_Result> sp_GetAccountRepOrg(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAccountRepOrg_Result>("sp_GetAccountRepOrg", personIDParameter);
        }
    
        public virtual ObjectResult<sp_GetActivityReportInformation_Result> sp_GetActivityReportInformation(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActivityReportInformation_Result>("sp_GetActivityReportInformation", courseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetActivityReportInformationByDateRange_Result> sp_GetActivityReportInformationByDateRange(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActivityReportInformationByDateRange_Result>("sp_GetActivityReportInformationByDateRange", startParameter, endParameter);
        }
    
        public virtual int sp_GetAllConferencesList_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAllConferencesList_Get");
        }
    
        public virtual ObjectResult<sp_GetAllConferenesList_Get_Result> sp_GetAllConferenesList_Get(Nullable<int> orgID, Nullable<int> roleID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllConferenesList_Get_Result>("sp_GetAllConferenesList_Get", orgIDParameter, roleIDParameter);
        }
    
        public virtual int Sp_GetAllCourses_Get(Nullable<int> orgID, Nullable<int> roleID, Nullable<long> personID, Nullable<bool> showOnlyPostedEvent, Nullable<bool> showOnlyPrePostedEvent, Nullable<bool> igonePostingStatus, Nullable<bool> showOnlyEventsOpenForEnrollment, Nullable<bool> showOnlyClosedEvents, Nullable<bool> showClosedAndOpenEvent, Nullable<bool> showOnlyStandaloneClose, Nullable<bool> showOnlyConferenceAssociatedCourse, Nullable<bool> showAllEventTypes, Nullable<bool> showOnsiteEvents, Nullable<bool> showOnlineEvents, Nullable<bool> showOnsiteAndOnlineEvents, Nullable<bool> showOnlyUnsponsorEvent, Nullable<bool> showOnlycosponsorEvent, Nullable<bool> showBothProvidedAndSponsorEvent)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var showOnlyPostedEventParameter = showOnlyPostedEvent.HasValue ?
                new ObjectParameter("ShowOnlyPostedEvent", showOnlyPostedEvent) :
                new ObjectParameter("ShowOnlyPostedEvent", typeof(bool));
    
            var showOnlyPrePostedEventParameter = showOnlyPrePostedEvent.HasValue ?
                new ObjectParameter("ShowOnlyPrePostedEvent", showOnlyPrePostedEvent) :
                new ObjectParameter("ShowOnlyPrePostedEvent", typeof(bool));
    
            var igonePostingStatusParameter = igonePostingStatus.HasValue ?
                new ObjectParameter("IgonePostingStatus", igonePostingStatus) :
                new ObjectParameter("IgonePostingStatus", typeof(bool));
    
            var showOnlyEventsOpenForEnrollmentParameter = showOnlyEventsOpenForEnrollment.HasValue ?
                new ObjectParameter("ShowOnlyEventsOpenForEnrollment", showOnlyEventsOpenForEnrollment) :
                new ObjectParameter("ShowOnlyEventsOpenForEnrollment", typeof(bool));
    
            var showOnlyClosedEventsParameter = showOnlyClosedEvents.HasValue ?
                new ObjectParameter("ShowOnlyClosedEvents", showOnlyClosedEvents) :
                new ObjectParameter("ShowOnlyClosedEvents", typeof(bool));
    
            var showClosedAndOpenEventParameter = showClosedAndOpenEvent.HasValue ?
                new ObjectParameter("ShowClosedAndOpenEvent", showClosedAndOpenEvent) :
                new ObjectParameter("ShowClosedAndOpenEvent", typeof(bool));
    
            var showOnlyStandaloneCloseParameter = showOnlyStandaloneClose.HasValue ?
                new ObjectParameter("ShowOnlyStandaloneClose", showOnlyStandaloneClose) :
                new ObjectParameter("ShowOnlyStandaloneClose", typeof(bool));
    
            var showOnlyConferenceAssociatedCourseParameter = showOnlyConferenceAssociatedCourse.HasValue ?
                new ObjectParameter("ShowOnlyConferenceAssociatedCourse", showOnlyConferenceAssociatedCourse) :
                new ObjectParameter("ShowOnlyConferenceAssociatedCourse", typeof(bool));
    
            var showAllEventTypesParameter = showAllEventTypes.HasValue ?
                new ObjectParameter("ShowAllEventTypes", showAllEventTypes) :
                new ObjectParameter("ShowAllEventTypes", typeof(bool));
    
            var showOnsiteEventsParameter = showOnsiteEvents.HasValue ?
                new ObjectParameter("ShowOnsiteEvents", showOnsiteEvents) :
                new ObjectParameter("ShowOnsiteEvents", typeof(bool));
    
            var showOnlineEventsParameter = showOnlineEvents.HasValue ?
                new ObjectParameter("ShowOnlineEvents", showOnlineEvents) :
                new ObjectParameter("ShowOnlineEvents", typeof(bool));
    
            var showOnsiteAndOnlineEventsParameter = showOnsiteAndOnlineEvents.HasValue ?
                new ObjectParameter("ShowOnsiteAndOnlineEvents", showOnsiteAndOnlineEvents) :
                new ObjectParameter("ShowOnsiteAndOnlineEvents", typeof(bool));
    
            var showOnlyUnsponsorEventParameter = showOnlyUnsponsorEvent.HasValue ?
                new ObjectParameter("ShowOnlyUnsponsorEvent", showOnlyUnsponsorEvent) :
                new ObjectParameter("ShowOnlyUnsponsorEvent", typeof(bool));
    
            var showOnlycosponsorEventParameter = showOnlycosponsorEvent.HasValue ?
                new ObjectParameter("ShowOnlycosponsorEvent", showOnlycosponsorEvent) :
                new ObjectParameter("ShowOnlycosponsorEvent", typeof(bool));
    
            var showBothProvidedAndSponsorEventParameter = showBothProvidedAndSponsorEvent.HasValue ?
                new ObjectParameter("ShowBothProvidedAndSponsorEvent", showBothProvidedAndSponsorEvent) :
                new ObjectParameter("ShowBothProvidedAndSponsorEvent", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetAllCourses_Get", orgIDParameter, roleIDParameter, personIDParameter, showOnlyPostedEventParameter, showOnlyPrePostedEventParameter, igonePostingStatusParameter, showOnlyEventsOpenForEnrollmentParameter, showOnlyClosedEventsParameter, showClosedAndOpenEventParameter, showOnlyStandaloneCloseParameter, showOnlyConferenceAssociatedCourseParameter, showAllEventTypesParameter, showOnsiteEventsParameter, showOnlineEventsParameter, showOnsiteAndOnlineEventsParameter, showOnlyUnsponsorEventParameter, showOnlycosponsorEventParameter, showBothProvidedAndSponsorEventParameter);
        }
    
        public virtual ObjectResult<Sp_GetAllCoursesCompletedSurvey_Get_Result> Sp_GetAllCoursesCompletedSurvey_Get(Nullable<int> orgID, Nullable<int> roleID, Nullable<bool> standaloneCourses, Nullable<bool> showAllEvents, Nullable<bool> excludeSponsorsEvents)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var standaloneCoursesParameter = standaloneCourses.HasValue ?
                new ObjectParameter("StandaloneCourses", standaloneCourses) :
                new ObjectParameter("StandaloneCourses", typeof(bool));
    
            var showAllEventsParameter = showAllEvents.HasValue ?
                new ObjectParameter("ShowAllEvents", showAllEvents) :
                new ObjectParameter("ShowAllEvents", typeof(bool));
    
            var excludeSponsorsEventsParameter = excludeSponsorsEvents.HasValue ?
                new ObjectParameter("ExcludeSponsorsEvents", excludeSponsorsEvents) :
                new ObjectParameter("ExcludeSponsorsEvents", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetAllCoursesCompletedSurvey_Get_Result>("Sp_GetAllCoursesCompletedSurvey_Get", orgIDParameter, roleIDParameter, standaloneCoursesParameter, showAllEventsParameter, excludeSponsorsEventsParameter);
        }
    
        public virtual ObjectResult<sp_GetAllOrganizations_Result> sp_GetAllOrganizations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOrganizations_Result>("sp_GetAllOrganizations");
        }
    
        public virtual ObjectResult<sp_GetAllOrganizationsforPerson_Result> sp_GetAllOrganizationsforPerson(Nullable<int> personID, Nullable<int> oid, Nullable<int> roleid)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var oidParameter = oid.HasValue ?
                new ObjectParameter("oid", oid) :
                new ObjectParameter("oid", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOrganizationsforPerson_Result>("sp_GetAllOrganizationsforPerson", personIDParameter, oidParameter, roleidParameter);
        }
    
        public virtual ObjectResult<sp_GetAllOrganizationsWithOID_Result> sp_GetAllOrganizationsWithOID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOrganizationsWithOID_Result>("sp_GetAllOrganizationsWithOID");
        }
    
        public virtual ObjectResult<sp_GetAllPersons_Result> sp_GetAllPersons()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllPersons_Result>("sp_GetAllPersons");
        }
    
        public virtual ObjectResult<sp_GetAllQuestionsList_Result> sp_GetAllQuestionsList(Nullable<int> surveyID, Nullable<int> personID, Nullable<int> roleID, Nullable<int> organizationID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllQuestionsList_Result>("sp_GetAllQuestionsList", surveyIDParameter, personIDParameter, roleIDParameter, organizationIDParameter);
        }
    
        public virtual int sp_GetBufferSurveyView(string qIDs)
        {
            var qIDsParameter = qIDs != null ?
                new ObjectParameter("QIDs", qIDs) :
                new ObjectParameter("QIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBufferSurveyView", qIDsParameter);
        }
    
        public virtual ObjectResult<sp_GetCertificateInformation_Result> sp_GetCertificateInformation(Nullable<long> personID, Nullable<int> courseID, Nullable<int> conferenceID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCertificateInformation_Result>("sp_GetCertificateInformation", personIDParameter, courseIDParameter, conferenceIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCEUIssedOrganization_Get_Result> sp_GetCEUIssedOrganization_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCEUIssedOrganization_Get_Result>("sp_GetCEUIssedOrganization_Get");
        }
    
        public virtual ObjectResult<string> sp_GetComments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetComments");
        }
    
        public virtual ObjectResult<sp_GetConferenceDescriptionForConfereneRoster_Get_Result> sp_GetConferenceDescriptionForConfereneRoster_Get(Nullable<int> conferenceID, Nullable<int> personID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetConferenceDescriptionForConfereneRoster_Get_Result>("sp_GetConferenceDescriptionForConfereneRoster_Get", conferenceIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<sp_GetConfernceAssociatedCourseInformationViaID_Get_Result> sp_GetConfernceAssociatedCourseInformationViaID_Get(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetConfernceAssociatedCourseInformationViaID_Get_Result>("sp_GetConfernceAssociatedCourseInformationViaID_Get", courseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetConfernceFeeMatrixByConfrenceID_Get_Result> sp_GetConfernceFeeMatrixByConfrenceID_Get(Nullable<int> conferenceID, Nullable<int> organizationID, Nullable<int> roleID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetConfernceFeeMatrixByConfrenceID_Get_Result>("sp_GetConfernceFeeMatrixByConfrenceID_Get", conferenceIDParameter, organizationIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCourseAttendeeListForCourseRoster_Get_Result> sp_GetCourseAttendeeListForCourseRoster_Get(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourseAttendeeListForCourseRoster_Get_Result>("sp_GetCourseAttendeeListForCourseRoster_Get", courseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCourseFeeMatrixByCourseID_Get_Result> sp_GetCourseFeeMatrixByCourseID_Get(Nullable<int> courseID, Nullable<int> organizationID, Nullable<int> roleID, Nullable<int> personID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourseFeeMatrixByCourseID_Get_Result>("sp_GetCourseFeeMatrixByCourseID_Get", courseIDParameter, organizationIDParameter, roleIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCourseInformationForCourseRoster_Get_Result> sp_GetCourseInformationForCourseRoster_Get(Nullable<int> courseID, Nullable<int> personID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourseInformationForCourseRoster_Get_Result>("sp_GetCourseInformationForCourseRoster_Get", courseIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCourseIssuersListForSurveySelection_Get_Result> sp_GetCourseIssuersListForSurveySelection_Get(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourseIssuersListForSurveySelection_Get_Result>("sp_GetCourseIssuersListForSurveySelection_Get", courseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCoursesListByOrganization_Get_Result> sp_GetCoursesListByOrganization_Get(Nullable<int> orgID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCoursesListByOrganization_Get_Result>("sp_GetCoursesListByOrganization_Get", orgIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCourseSurveyRate_Get_Result> sp_GetCourseSurveyRate_Get(Nullable<int> courseID, Nullable<int> surveyType)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var surveyTypeParameter = surveyType.HasValue ?
                new ObjectParameter("SurveyType", surveyType) :
                new ObjectParameter("SurveyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourseSurveyRate_Get_Result>("sp_GetCourseSurveyRate_Get", courseIDParameter, surveyTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetCourseSurveyView_Result> sp_GetCourseSurveyView(Nullable<int> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCourseSurveyView_Result>("sp_GetCourseSurveyView", surveyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetEcommerceTransactions_Result> sp_GetEcommerceTransactions(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> organizationID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEcommerceTransactions_Result>("sp_GetEcommerceTransactions", startDateParameter, endDateParameter, organizationIDParameter);
        }
    
        public virtual int sp_GetEcommerceTransactionsReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetEcommerceTransactionsReport", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetHelpFiles_Result> sp_GetHelpFiles(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetHelpFiles_Result>("sp_GetHelpFiles", typeParameter);
        }
    
        public virtual ObjectResult<sp_GetOrganizationCredentialByID_Result> sp_GetOrganizationCredentialByID(Nullable<int> oID)
        {
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOrganizationCredentialByID_Result>("sp_GetOrganizationCredentialByID", oIDParameter);
        }
    
        public virtual ObjectResult<sp_GetOrganizationRole_Result> sp_GetOrganizationRole(Nullable<int> roleTypeID, Nullable<int> organizationID)
        {
            var roleTypeIDParameter = roleTypeID.HasValue ?
                new ObjectParameter("RoleTypeID", roleTypeID) :
                new ObjectParameter("RoleTypeID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOrganizationRole_Result>("sp_GetOrganizationRole", roleTypeIDParameter, organizationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPersonsComepletedSurveyByCourse_GET_Result> sp_GetPersonsComepletedSurveyByCourse_GET(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPersonsComepletedSurveyByCourse_GET_Result>("sp_GetPersonsComepletedSurveyByCourse_GET", courseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPersonsToSendCredentials_Result> sp_GetPersonsToSendCredentials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPersonsToSendCredentials_Result>("sp_GetPersonsToSendCredentials");
        }
    
        public virtual ObjectResult<Sp_GetSponsors_Result> Sp_GetSponsors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetSponsors_Result>("Sp_GetSponsors");
        }
    
        public virtual ObjectResult<sp_GetSuerveyQuestionsAndOptions_Result> sp_GetSuerveyQuestionsAndOptions(Nullable<int> courseID, Nullable<int> surveyType)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var surveyTypeParameter = surveyType.HasValue ?
                new ObjectParameter("SurveyType", surveyType) :
                new ObjectParameter("SurveyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSuerveyQuestionsAndOptions_Result>("sp_GetSuerveyQuestionsAndOptions", courseIDParameter, surveyTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetSurveyResultToView_Get_Result> sp_GetSurveyResultToView_Get(Nullable<int> courseSurveyID)
        {
            var courseSurveyIDParameter = courseSurveyID.HasValue ?
                new ObjectParameter("CourseSurveyID", courseSurveyID) :
                new ObjectParameter("CourseSurveyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSurveyResultToView_Get_Result>("sp_GetSurveyResultToView_Get", courseSurveyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetUserInfo_ByPersonID_Result> sp_GetUserInfo_ByPersonID(Nullable<long> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserInfo_ByPersonID_Result>("sp_GetUserInfo_ByPersonID", personIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWhatsNew_Result> sp_GetWhatsNew(string visibility)
        {
            var visibilityParameter = visibility != null ?
                new ObjectParameter("Visibility", visibility) :
                new ObjectParameter("Visibility", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWhatsNew_Result>("sp_GetWhatsNew", visibilityParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_Insert_CourseFeeDetails(Nullable<int> feeMasterId, string promoCode, Nullable<decimal> advEnrollment, Nullable<decimal> memAdvEnrollment, Nullable<decimal> lateEnrollment)
        {
            var feeMasterIdParameter = feeMasterId.HasValue ?
                new ObjectParameter("FeeMasterId", feeMasterId) :
                new ObjectParameter("FeeMasterId", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var advEnrollmentParameter = advEnrollment.HasValue ?
                new ObjectParameter("AdvEnrollment", advEnrollment) :
                new ObjectParameter("AdvEnrollment", typeof(decimal));
    
            var memAdvEnrollmentParameter = memAdvEnrollment.HasValue ?
                new ObjectParameter("MemAdvEnrollment", memAdvEnrollment) :
                new ObjectParameter("MemAdvEnrollment", typeof(decimal));
    
            var lateEnrollmentParameter = lateEnrollment.HasValue ?
                new ObjectParameter("LateEnrollment", lateEnrollment) :
                new ObjectParameter("LateEnrollment", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_CourseFeeDetails", feeMasterIdParameter, promoCodeParameter, advEnrollmentParameter, memAdvEnrollmentParameter, lateEnrollmentParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Insert_CourseSponsor(Nullable<int> courseId, Nullable<int> organizationId, Nullable<bool> isPrimarySponsor, Nullable<bool> isApproved)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(int));
    
            var isPrimarySponsorParameter = isPrimarySponsor.HasValue ?
                new ObjectParameter("IsPrimarySponsor", isPrimarySponsor) :
                new ObjectParameter("IsPrimarySponsor", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Insert_CourseSponsor", courseIdParameter, organizationIdParameter, isPrimarySponsorParameter, isApprovedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Insert_StandAloneCourse(Nullable<int> orgID, Nullable<int> facilityID, Nullable<bool> courseIsOnline, Nullable<bool> courseIsAssignedToConference, string roomNbr, Nullable<short> attendeeCapacity, Nullable<int> courseTopicID, Nullable<int> courseFocusID, Nullable<int> courseLearningOutcomeID, Nullable<int> courseEffectID, Nullable<int> courseEvaluationMethodID, Nullable<int> surveyID, Nullable<int> preSurveyID, string courseDescription, Nullable<System.DateTime> courseDate, Nullable<System.TimeSpan> courseStartTime, Nullable<System.TimeSpan> courseEndTime, Nullable<System.TimeSpan> offTaskMinutes, Nullable<System.DateTime> courseEnrollmentDeadline, Nullable<System.DateTime> credentialIssuanceDate, string promotionalurl, Nullable<System.DateTime> postingDate, Nullable<int> setASide)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var courseIsOnlineParameter = courseIsOnline.HasValue ?
                new ObjectParameter("CourseIsOnline", courseIsOnline) :
                new ObjectParameter("CourseIsOnline", typeof(bool));
    
            var courseIsAssignedToConferenceParameter = courseIsAssignedToConference.HasValue ?
                new ObjectParameter("CourseIsAssignedToConference", courseIsAssignedToConference) :
                new ObjectParameter("CourseIsAssignedToConference", typeof(bool));
    
            var roomNbrParameter = roomNbr != null ?
                new ObjectParameter("RoomNbr", roomNbr) :
                new ObjectParameter("RoomNbr", typeof(string));
    
            var attendeeCapacityParameter = attendeeCapacity.HasValue ?
                new ObjectParameter("AttendeeCapacity", attendeeCapacity) :
                new ObjectParameter("AttendeeCapacity", typeof(short));
    
            var courseTopicIDParameter = courseTopicID.HasValue ?
                new ObjectParameter("CourseTopicID", courseTopicID) :
                new ObjectParameter("CourseTopicID", typeof(int));
    
            var courseFocusIDParameter = courseFocusID.HasValue ?
                new ObjectParameter("CourseFocusID", courseFocusID) :
                new ObjectParameter("CourseFocusID", typeof(int));
    
            var courseLearningOutcomeIDParameter = courseLearningOutcomeID.HasValue ?
                new ObjectParameter("CourseLearningOutcomeID", courseLearningOutcomeID) :
                new ObjectParameter("CourseLearningOutcomeID", typeof(int));
    
            var courseEffectIDParameter = courseEffectID.HasValue ?
                new ObjectParameter("CourseEffectID", courseEffectID) :
                new ObjectParameter("CourseEffectID", typeof(int));
    
            var courseEvaluationMethodIDParameter = courseEvaluationMethodID.HasValue ?
                new ObjectParameter("CourseEvaluationMethodID", courseEvaluationMethodID) :
                new ObjectParameter("CourseEvaluationMethodID", typeof(int));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var preSurveyIDParameter = preSurveyID.HasValue ?
                new ObjectParameter("PreSurveyID", preSurveyID) :
                new ObjectParameter("PreSurveyID", typeof(int));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var courseDateParameter = courseDate.HasValue ?
                new ObjectParameter("CourseDate", courseDate) :
                new ObjectParameter("CourseDate", typeof(System.DateTime));
    
            var courseStartTimeParameter = courseStartTime.HasValue ?
                new ObjectParameter("CourseStartTime", courseStartTime) :
                new ObjectParameter("CourseStartTime", typeof(System.TimeSpan));
    
            var courseEndTimeParameter = courseEndTime.HasValue ?
                new ObjectParameter("CourseEndTime", courseEndTime) :
                new ObjectParameter("CourseEndTime", typeof(System.TimeSpan));
    
            var offTaskMinutesParameter = offTaskMinutes.HasValue ?
                new ObjectParameter("OffTaskMinutes", offTaskMinutes) :
                new ObjectParameter("OffTaskMinutes", typeof(System.TimeSpan));
    
            var courseEnrollmentDeadlineParameter = courseEnrollmentDeadline.HasValue ?
                new ObjectParameter("CourseEnrollmentDeadline", courseEnrollmentDeadline) :
                new ObjectParameter("CourseEnrollmentDeadline", typeof(System.DateTime));
    
            var credentialIssuanceDateParameter = credentialIssuanceDate.HasValue ?
                new ObjectParameter("CredentialIssuanceDate", credentialIssuanceDate) :
                new ObjectParameter("CredentialIssuanceDate", typeof(System.DateTime));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            var setASideParameter = setASide.HasValue ?
                new ObjectParameter("SetASide", setASide) :
                new ObjectParameter("SetASide", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Insert_StandAloneCourse", orgIDParameter, facilityIDParameter, courseIsOnlineParameter, courseIsAssignedToConferenceParameter, roomNbrParameter, attendeeCapacityParameter, courseTopicIDParameter, courseFocusIDParameter, courseLearningOutcomeIDParameter, courseEffectIDParameter, courseEvaluationMethodIDParameter, surveyIDParameter, preSurveyIDParameter, courseDescriptionParameter, courseDateParameter, courseStartTimeParameter, courseEndTimeParameter, offTaskMinutesParameter, courseEnrollmentDeadlineParameter, credentialIssuanceDateParameter, promotionalurlParameter, postingDateParameter, setASideParameter);
        }
    
        public virtual int sp_InsertAndAssigNewQuestion_Insert(Nullable<int> surveyID, string question)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAndAssigNewQuestion_Insert", surveyIDParameter, questionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsertNewQuestion(string question, Nullable<int> personID, Nullable<int> organizationID)
        {
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsertNewQuestion", questionParameter, personIDParameter, organizationIDParameter);
        }
    
        public virtual int sp_InsertPersonCourseAttendance_Insert(Nullable<int> enrollmentMasterID)
        {
            var enrollmentMasterIDParameter = enrollmentMasterID.HasValue ?
                new ObjectParameter("EnrollmentMasterID", enrollmentMasterID) :
                new ObjectParameter("EnrollmentMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertPersonCourseAttendance_Insert", enrollmentMasterIDParameter);
        }
    
        public virtual int sp_InsertResponse(Nullable<int> questionID, string response, Nullable<int> orderNumber)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertResponse", questionIDParameter, responseParameter, orderNumberParameter);
        }
    
        public virtual int sp_InsertSurveyResult(Nullable<int> courseSurveyID, Nullable<int> sQID, Nullable<int> qScaleID)
        {
            var courseSurveyIDParameter = courseSurveyID.HasValue ?
                new ObjectParameter("CourseSurveyID", courseSurveyID) :
                new ObjectParameter("CourseSurveyID", typeof(int));
    
            var sQIDParameter = sQID.HasValue ?
                new ObjectParameter("SQID", sQID) :
                new ObjectParameter("SQID", typeof(int));
    
            var qScaleIDParameter = qScaleID.HasValue ?
                new ObjectParameter("QScaleID", qScaleID) :
                new ObjectParameter("QScaleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSurveyResult", courseSurveyIDParameter, sQIDParameter, qScaleIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_IsPersonAccrep(Nullable<int> personID, Nullable<int> oID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_IsPersonAccrep", personIDParameter, oIDParameter);
        }
    
        public virtual ObjectResult<sp_IsPersonCanApplyForSurvey_Get_Result> sp_IsPersonCanApplyForSurvey_Get(Nullable<int> courseID, Nullable<int> personID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IsPersonCanApplyForSurvey_Get_Result>("sp_IsPersonCanApplyForSurvey_Get", courseIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_IsPersonEnrollInCourse(Nullable<int> courseId, Nullable<long> personId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_IsPersonEnrollInCourse", courseIdParameter, personIdParameter);
        }
    
        public virtual ObjectResult<string> sp_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Login", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_Login_Validate_Result> sp_Login_Validate(string userName, string password, Nullable<int> organizationID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Validate_Result>("sp_Login_Validate", userNameParameter, passwordParameter, organizationIDParameter);
        }
    
        public virtual ObjectResult<sp_Login_Validate_Android_Result> sp_Login_Validate_Android(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Validate_Android_Result>("sp_Login_Validate_Android", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_MarkAttendence_Android(Nullable<int> eventID, string credential)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var credentialParameter = credential != null ?
                new ObjectParameter("Credential", credential) :
                new ObjectParameter("Credential", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MarkAttendence_Android", eventIDParameter, credentialParameter);
        }
    
        public virtual int sp_ModifyPassword(Nullable<int> iD, string pass, Nullable<int> organizationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModifyPassword", iDParameter, passParameter, organizationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_NewSurvey_Insert(string survey, Nullable<int> organizationID)
        {
            var surveyParameter = survey != null ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(string));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_NewSurvey_Insert", surveyParameter, organizationIDParameter);
        }
    
        public virtual int sp_NewSurveyQuestion_Insert(Nullable<int> surveyID, Nullable<int> questionID, Nullable<int> questionOrder)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var questionOrderParameter = questionOrder.HasValue ?
                new ObjectParameter("QuestionOrder", questionOrder) :
                new ObjectParameter("QuestionOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewSurveyQuestion_Insert", surveyIDParameter, questionIDParameter, questionOrderParameter);
        }
    
        public virtual int SP_Person_Degree_Delete(Nullable<int> personID, Nullable<int> degreeTypeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var degreeTypeIDParameter = degreeTypeID.HasValue ?
                new ObjectParameter("DegreeTypeID", degreeTypeID) :
                new ObjectParameter("DegreeTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Person_Degree_Delete", personIDParameter, degreeTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_Person_Exists_Result> sp_Person_Exists(string firstName, string middleName, string lastName, Nullable<int> genderId, Nullable<System.DateTime> dateOfBirth, Nullable<int> secretQuestionId, string secretAnswer, Nullable<int> organizationID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var secretQuestionIdParameter = secretQuestionId.HasValue ?
                new ObjectParameter("SecretQuestionId", secretQuestionId) :
                new ObjectParameter("SecretQuestionId", typeof(int));
    
            var secretAnswerParameter = secretAnswer != null ?
                new ObjectParameter("SecretAnswer", secretAnswer) :
                new ObjectParameter("SecretAnswer", typeof(string));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Person_Exists_Result>("sp_Person_Exists", firstNameParameter, middleNameParameter, lastNameParameter, genderIdParameter, dateOfBirthParameter, secretQuestionIdParameter, secretAnswerParameter, organizationIDParameter);
        }
    
        public virtual int sp_Person_Insert(string fName, string mName, string lName, Nullable<int> suffixID, Nullable<int> sexID, Nullable<System.DateTime> dateOfBirth, Nullable<long> nasnIdentifier, string uid, Nullable<int> secretQuestionID, string secretQuestionAnswer, string sSN, string eMailAddressPersonal, Nullable<int> residence_MunicipalityID, string residence_StreetName, Nullable<decimal> residence_BuildingNumber, string residence_Unit, string residence_Zipcode, string residence_Zipcode4, Nullable<int> mailing_MunicipalityID, string mailing_StreetName, Nullable<decimal> mailing_BuildingNumber, string mailing_Unit, string mailing_Zipcode, string mailing_Zipcode4, ObjectParameter personID)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var suffixIDParameter = suffixID.HasValue ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(int));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var nasnIdentifierParameter = nasnIdentifier.HasValue ?
                new ObjectParameter("NasnIdentifier", nasnIdentifier) :
                new ObjectParameter("NasnIdentifier", typeof(long));
    
            var uidParameter = uid != null ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(string));
    
            var secretQuestionIDParameter = secretQuestionID.HasValue ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(int));
    
            var secretQuestionAnswerParameter = secretQuestionAnswer != null ?
                new ObjectParameter("SecretQuestionAnswer", secretQuestionAnswer) :
                new ObjectParameter("SecretQuestionAnswer", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var eMailAddressPersonalParameter = eMailAddressPersonal != null ?
                new ObjectParameter("EMailAddressPersonal", eMailAddressPersonal) :
                new ObjectParameter("EMailAddressPersonal", typeof(string));
    
            var residence_MunicipalityIDParameter = residence_MunicipalityID.HasValue ?
                new ObjectParameter("Residence_MunicipalityID", residence_MunicipalityID) :
                new ObjectParameter("Residence_MunicipalityID", typeof(int));
    
            var residence_StreetNameParameter = residence_StreetName != null ?
                new ObjectParameter("Residence_StreetName", residence_StreetName) :
                new ObjectParameter("Residence_StreetName", typeof(string));
    
            var residence_BuildingNumberParameter = residence_BuildingNumber.HasValue ?
                new ObjectParameter("Residence_BuildingNumber", residence_BuildingNumber) :
                new ObjectParameter("Residence_BuildingNumber", typeof(decimal));
    
            var residence_UnitParameter = residence_Unit != null ?
                new ObjectParameter("Residence_Unit", residence_Unit) :
                new ObjectParameter("Residence_Unit", typeof(string));
    
            var residence_ZipcodeParameter = residence_Zipcode != null ?
                new ObjectParameter("Residence_Zipcode", residence_Zipcode) :
                new ObjectParameter("Residence_Zipcode", typeof(string));
    
            var residence_Zipcode4Parameter = residence_Zipcode4 != null ?
                new ObjectParameter("Residence_Zipcode4", residence_Zipcode4) :
                new ObjectParameter("Residence_Zipcode4", typeof(string));
    
            var mailing_MunicipalityIDParameter = mailing_MunicipalityID.HasValue ?
                new ObjectParameter("Mailing_MunicipalityID", mailing_MunicipalityID) :
                new ObjectParameter("Mailing_MunicipalityID", typeof(int));
    
            var mailing_StreetNameParameter = mailing_StreetName != null ?
                new ObjectParameter("Mailing_StreetName", mailing_StreetName) :
                new ObjectParameter("Mailing_StreetName", typeof(string));
    
            var mailing_BuildingNumberParameter = mailing_BuildingNumber.HasValue ?
                new ObjectParameter("Mailing_BuildingNumber", mailing_BuildingNumber) :
                new ObjectParameter("Mailing_BuildingNumber", typeof(decimal));
    
            var mailing_UnitParameter = mailing_Unit != null ?
                new ObjectParameter("Mailing_Unit", mailing_Unit) :
                new ObjectParameter("Mailing_Unit", typeof(string));
    
            var mailing_ZipcodeParameter = mailing_Zipcode != null ?
                new ObjectParameter("Mailing_Zipcode", mailing_Zipcode) :
                new ObjectParameter("Mailing_Zipcode", typeof(string));
    
            var mailing_Zipcode4Parameter = mailing_Zipcode4 != null ?
                new ObjectParameter("Mailing_Zipcode4", mailing_Zipcode4) :
                new ObjectParameter("Mailing_Zipcode4", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Person_Insert", fNameParameter, mNameParameter, lNameParameter, suffixIDParameter, sexIDParameter, dateOfBirthParameter, nasnIdentifierParameter, uidParameter, secretQuestionIDParameter, secretQuestionAnswerParameter, sSNParameter, eMailAddressPersonalParameter, residence_MunicipalityIDParameter, residence_StreetNameParameter, residence_BuildingNumberParameter, residence_UnitParameter, residence_ZipcodeParameter, residence_Zipcode4Parameter, mailing_MunicipalityIDParameter, mailing_StreetNameParameter, mailing_BuildingNumberParameter, mailing_UnitParameter, mailing_ZipcodeParameter, mailing_Zipcode4Parameter, personID);
        }
    
        public virtual int sp_Person_Organization_Role_Insert(Nullable<int> personOrganizationRoles, Nullable<int> personID, Nullable<int> organizationID, Nullable<int> roleID, Nullable<int> roleTypeID, ObjectParameter retVal)
        {
            var personOrganizationRolesParameter = personOrganizationRoles.HasValue ?
                new ObjectParameter("PersonOrganizationRoles", personOrganizationRoles) :
                new ObjectParameter("PersonOrganizationRoles", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleTypeIDParameter = roleTypeID.HasValue ?
                new ObjectParameter("RoleTypeID", roleTypeID) :
                new ObjectParameter("RoleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Person_Organization_Role_Insert", personOrganizationRolesParameter, personIDParameter, organizationIDParameter, roleIDParameter, roleTypeIDParameter, retVal);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Person_UserNameAvailability_Get(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Person_UserNameAvailability_Get", userNameParameter);
        }
    
        public virtual ObjectResult<SP_PersonDetail_Get_Result> SP_PersonDetail_Get(Nullable<long> personID, Nullable<int> loggedInPersonRoleID, Nullable<int> oID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var loggedInPersonRoleIDParameter = loggedInPersonRoleID.HasValue ?
                new ObjectParameter("LoggedInPersonRoleID", loggedInPersonRoleID) :
                new ObjectParameter("LoggedInPersonRoleID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PersonDetail_Get_Result>("SP_PersonDetail_Get", personIDParameter, loggedInPersonRoleIDParameter, oIDParameter);
        }
    
        public virtual ObjectResult<SP_PersonDetail_Get_Tempt_Result> SP_PersonDetail_Get_Tempt(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PersonDetail_Get_Tempt_Result>("SP_PersonDetail_Get_Tempt", personIDParameter);
        }
    
        public virtual int SP_PersonDetail_Update(Nullable<int> personID, string fName, string mName, string lName, Nullable<int> suffixID, Nullable<int> sexID, Nullable<System.DateTime> dateOfBirth, string nasnIdentifier, string userName, Nullable<int> secretQuestionID, string secretQuestionDesc, string secretQuestionAnswer, string phonePersonal, string mobilePerson, string sSN, string eMailPersonal, Nullable<int> residence_StateID, Nullable<int> residence_MunicipalityID, string residence_StreetName, Nullable<int> residence_BuildingNumber, string residence_Unit, string residence_Zipcode, Nullable<int> mailingStateID, Nullable<int> mailing_MunicipalityID, string mailing_StreetName, string mailing_BuildingNumber, string mailing_Unit, string mailing_Zipcode, Nullable<int> schoolDistrictID, Nullable<int> schoolID, string phoneWork, string eINNbr, string eMailWork, Nullable<bool> isDeceased, Nullable<int> roleID, Nullable<int> organizationID, Nullable<int> mailingAddressTypeID, Nullable<bool> retired, string userID, string password, Nullable<int> selectedOID, Nullable<System.DateTime> membershipExpiryDate, Nullable<System.DateTime> membershipJoinOnDate, Nullable<decimal> membershipDues, Nullable<System.DateTime> paidOnDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var suffixIDParameter = suffixID.HasValue ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(int));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var nasnIdentifierParameter = nasnIdentifier != null ?
                new ObjectParameter("NasnIdentifier", nasnIdentifier) :
                new ObjectParameter("NasnIdentifier", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var secretQuestionIDParameter = secretQuestionID.HasValue ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(int));
    
            var secretQuestionDescParameter = secretQuestionDesc != null ?
                new ObjectParameter("SecretQuestionDesc", secretQuestionDesc) :
                new ObjectParameter("SecretQuestionDesc", typeof(string));
    
            var secretQuestionAnswerParameter = secretQuestionAnswer != null ?
                new ObjectParameter("SecretQuestionAnswer", secretQuestionAnswer) :
                new ObjectParameter("SecretQuestionAnswer", typeof(string));
    
            var phonePersonalParameter = phonePersonal != null ?
                new ObjectParameter("PhonePersonal", phonePersonal) :
                new ObjectParameter("PhonePersonal", typeof(string));
    
            var mobilePersonParameter = mobilePerson != null ?
                new ObjectParameter("MobilePerson", mobilePerson) :
                new ObjectParameter("MobilePerson", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var eMailPersonalParameter = eMailPersonal != null ?
                new ObjectParameter("EMailPersonal", eMailPersonal) :
                new ObjectParameter("EMailPersonal", typeof(string));
    
            var residence_StateIDParameter = residence_StateID.HasValue ?
                new ObjectParameter("Residence_StateID", residence_StateID) :
                new ObjectParameter("Residence_StateID", typeof(int));
    
            var residence_MunicipalityIDParameter = residence_MunicipalityID.HasValue ?
                new ObjectParameter("Residence_MunicipalityID", residence_MunicipalityID) :
                new ObjectParameter("Residence_MunicipalityID", typeof(int));
    
            var residence_StreetNameParameter = residence_StreetName != null ?
                new ObjectParameter("Residence_StreetName", residence_StreetName) :
                new ObjectParameter("Residence_StreetName", typeof(string));
    
            var residence_BuildingNumberParameter = residence_BuildingNumber.HasValue ?
                new ObjectParameter("Residence_BuildingNumber", residence_BuildingNumber) :
                new ObjectParameter("Residence_BuildingNumber", typeof(int));
    
            var residence_UnitParameter = residence_Unit != null ?
                new ObjectParameter("Residence_Unit", residence_Unit) :
                new ObjectParameter("Residence_Unit", typeof(string));
    
            var residence_ZipcodeParameter = residence_Zipcode != null ?
                new ObjectParameter("Residence_Zipcode", residence_Zipcode) :
                new ObjectParameter("Residence_Zipcode", typeof(string));
    
            var mailingStateIDParameter = mailingStateID.HasValue ?
                new ObjectParameter("MailingStateID", mailingStateID) :
                new ObjectParameter("MailingStateID", typeof(int));
    
            var mailing_MunicipalityIDParameter = mailing_MunicipalityID.HasValue ?
                new ObjectParameter("Mailing_MunicipalityID", mailing_MunicipalityID) :
                new ObjectParameter("Mailing_MunicipalityID", typeof(int));
    
            var mailing_StreetNameParameter = mailing_StreetName != null ?
                new ObjectParameter("Mailing_StreetName", mailing_StreetName) :
                new ObjectParameter("Mailing_StreetName", typeof(string));
    
            var mailing_BuildingNumberParameter = mailing_BuildingNumber != null ?
                new ObjectParameter("Mailing_BuildingNumber", mailing_BuildingNumber) :
                new ObjectParameter("Mailing_BuildingNumber", typeof(string));
    
            var mailing_UnitParameter = mailing_Unit != null ?
                new ObjectParameter("Mailing_Unit", mailing_Unit) :
                new ObjectParameter("Mailing_Unit", typeof(string));
    
            var mailing_ZipcodeParameter = mailing_Zipcode != null ?
                new ObjectParameter("Mailing_Zipcode", mailing_Zipcode) :
                new ObjectParameter("Mailing_Zipcode", typeof(string));
    
            var schoolDistrictIDParameter = schoolDistrictID.HasValue ?
                new ObjectParameter("SchoolDistrictID", schoolDistrictID) :
                new ObjectParameter("SchoolDistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var phoneWorkParameter = phoneWork != null ?
                new ObjectParameter("PhoneWork", phoneWork) :
                new ObjectParameter("PhoneWork", typeof(string));
    
            var eINNbrParameter = eINNbr != null ?
                new ObjectParameter("EINNbr", eINNbr) :
                new ObjectParameter("EINNbr", typeof(string));
    
            var eMailWorkParameter = eMailWork != null ?
                new ObjectParameter("EMailWork", eMailWork) :
                new ObjectParameter("EMailWork", typeof(string));
    
            var isDeceasedParameter = isDeceased.HasValue ?
                new ObjectParameter("IsDeceased", isDeceased) :
                new ObjectParameter("IsDeceased", typeof(bool));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var mailingAddressTypeIDParameter = mailingAddressTypeID.HasValue ?
                new ObjectParameter("MailingAddressTypeID", mailingAddressTypeID) :
                new ObjectParameter("MailingAddressTypeID", typeof(int));
    
            var retiredParameter = retired.HasValue ?
                new ObjectParameter("Retired", retired) :
                new ObjectParameter("Retired", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var selectedOIDParameter = selectedOID.HasValue ?
                new ObjectParameter("SelectedOID", selectedOID) :
                new ObjectParameter("SelectedOID", typeof(int));
    
            var membershipExpiryDateParameter = membershipExpiryDate.HasValue ?
                new ObjectParameter("MembershipExpiryDate", membershipExpiryDate) :
                new ObjectParameter("MembershipExpiryDate", typeof(System.DateTime));
    
            var membershipJoinOnDateParameter = membershipJoinOnDate.HasValue ?
                new ObjectParameter("MembershipJoinOnDate", membershipJoinOnDate) :
                new ObjectParameter("MembershipJoinOnDate", typeof(System.DateTime));
    
            var membershipDuesParameter = membershipDues.HasValue ?
                new ObjectParameter("MembershipDues", membershipDues) :
                new ObjectParameter("MembershipDues", typeof(decimal));
    
            var paidOnDateParameter = paidOnDate.HasValue ?
                new ObjectParameter("PaidOnDate", paidOnDate) :
                new ObjectParameter("PaidOnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonDetail_Update", personIDParameter, fNameParameter, mNameParameter, lNameParameter, suffixIDParameter, sexIDParameter, dateOfBirthParameter, nasnIdentifierParameter, userNameParameter, secretQuestionIDParameter, secretQuestionDescParameter, secretQuestionAnswerParameter, phonePersonalParameter, mobilePersonParameter, sSNParameter, eMailPersonalParameter, residence_StateIDParameter, residence_MunicipalityIDParameter, residence_StreetNameParameter, residence_BuildingNumberParameter, residence_UnitParameter, residence_ZipcodeParameter, mailingStateIDParameter, mailing_MunicipalityIDParameter, mailing_StreetNameParameter, mailing_BuildingNumberParameter, mailing_UnitParameter, mailing_ZipcodeParameter, schoolDistrictIDParameter, schoolIDParameter, phoneWorkParameter, eINNbrParameter, eMailWorkParameter, isDeceasedParameter, roleIDParameter, organizationIDParameter, mailingAddressTypeIDParameter, retiredParameter, userIDParameter, passwordParameter, selectedOIDParameter, membershipExpiryDateParameter, membershipJoinOnDateParameter, membershipDuesParameter, paidOnDateParameter);
        }
    
        public virtual int SP_PersonLicense_Delete(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonLicense_Delete", personIDParameter);
        }
    
        public virtual int SP_PersonLicense_Insert(Nullable<int> personID, Nullable<int> personLicenseID, Nullable<int> stateID, Nullable<int> levelID, string licenseNumber, Nullable<System.DateTime> expiryDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var personLicenseIDParameter = personLicenseID.HasValue ?
                new ObjectParameter("PersonLicenseID", personLicenseID) :
                new ObjectParameter("PersonLicenseID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonLicense_Insert", personIDParameter, personLicenseIDParameter, stateIDParameter, levelIDParameter, licenseNumberParameter, expiryDateParameter);
        }
    
        public virtual int SP_PersonLicense_Update(Nullable<int> personID, Nullable<int> licenseStateID, Nullable<int> licenseLevelID, string licenseNbr, string licenseExpirationDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var licenseStateIDParameter = licenseStateID.HasValue ?
                new ObjectParameter("LicenseStateID", licenseStateID) :
                new ObjectParameter("LicenseStateID", typeof(int));
    
            var licenseLevelIDParameter = licenseLevelID.HasValue ?
                new ObjectParameter("LicenseLevelID", licenseLevelID) :
                new ObjectParameter("LicenseLevelID", typeof(int));
    
            var licenseNbrParameter = licenseNbr != null ?
                new ObjectParameter("LicenseNbr", licenseNbr) :
                new ObjectParameter("LicenseNbr", typeof(string));
    
            var licenseExpirationDateParameter = licenseExpirationDate != null ?
                new ObjectParameter("LicenseExpirationDate", licenseExpirationDate) :
                new ObjectParameter("LicenseExpirationDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonLicense_Update", personIDParameter, licenseStateIDParameter, licenseLevelIDParameter, licenseNbrParameter, licenseExpirationDateParameter);
        }
    
        public virtual ObjectResult<Sp_PersonList_Get_Result> Sp_PersonList_Get(Nullable<int> organizationID, Nullable<int> oIDmem)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var oIDmemParameter = oIDmem.HasValue ?
                new ObjectParameter("OIDmem", oIDmem) :
                new ObjectParameter("OIDmem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PersonList_Get_Result>("Sp_PersonList_Get", organizationIDParameter, oIDmemParameter);
        }
    
        public virtual int SP_PersonNonNuringDegree_Delete(Nullable<int> personID, Nullable<int> degreeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonNonNuringDegree_Delete", personIDParameter, degreeIDParameter);
        }
    
        public virtual int SP_PersonNuringDegree_Delete(Nullable<int> personID, Nullable<int> degreeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonNuringDegree_Delete", personIDParameter, degreeIDParameter);
        }
    
        public virtual int SP_PersonNuringDegree_Insert(Nullable<int> personID, Nullable<int> degreeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonNuringDegree_Insert", personIDParameter, degreeIDParameter);
        }
    
        public virtual ObjectResult<SP_PersonOrginzationRoles_Get_Result> SP_PersonOrginzationRoles_Get(Nullable<int> personID, Nullable<int> organizationID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PersonOrginzationRoles_Get_Result>("SP_PersonOrginzationRoles_Get", personIDParameter, organizationIDParameter);
        }
    
        public virtual int SP_PersonRole_Delete(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonRole_Delete", personIDParameter);
        }
    
        public virtual int SP_PersonRole_Insert(Nullable<int> personID, Nullable<int> organizationID, Nullable<int> roleTypeID, Nullable<int> roleID, string psw)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var roleTypeIDParameter = roleTypeID.HasValue ?
                new ObjectParameter("RoleTypeID", roleTypeID) :
                new ObjectParameter("RoleTypeID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var pswParameter = psw != null ?
                new ObjectParameter("Psw", psw) :
                new ObjectParameter("Psw", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PersonRole_Insert", personIDParameter, organizationIDParameter, roleTypeIDParameter, roleIDParameter, pswParameter);
        }
    
        public virtual ObjectResult<Sp_PresentersList_Get_Result> Sp_PresentersList_Get(Nullable<int> organizationID)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PresentersList_Get_Result>("Sp_PresentersList_Get", organizationIDParameter);
        }
    
        public virtual int sp_Register_Insert(string firstName, string lastName, Nullable<int> sexID, string userName, Nullable<int> secretQuestionID, string secretQuestionAnswer, string sSN, string emailPersonal, string password, ObjectParameter personOrganizationRoleID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var secretQuestionIDParameter = secretQuestionID.HasValue ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(int));
    
            var secretQuestionAnswerParameter = secretQuestionAnswer != null ?
                new ObjectParameter("SecretQuestionAnswer", secretQuestionAnswer) :
                new ObjectParameter("SecretQuestionAnswer", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var emailPersonalParameter = emailPersonal != null ?
                new ObjectParameter("EmailPersonal", emailPersonal) :
                new ObjectParameter("EmailPersonal", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Register_Insert", firstNameParameter, lastNameParameter, sexIDParameter, userNameParameter, secretQuestionIDParameter, secretQuestionAnswerParameter, sSNParameter, emailPersonalParameter, passwordParameter, personOrganizationRoleID);
        }
    
        public virtual ObjectResult<sp_Register_Person_Result> sp_Register_Person(string firstName, string mName, string lastName, Nullable<int> suffixID, Nullable<int> sexID, Nullable<System.DateTime> dateofBirth, Nullable<long> nasnIdentifier, string userName, Nullable<int> secretQuestionID, string secretQuestionAnswer, string sSN, string eMailPersonal, Nullable<int> residence_MunicipalityID, Nullable<int> residence_StateID, string residence_StreetName, Nullable<decimal> residence_BuildingNumber, string residence_Unit, string residence_Zipcode, Nullable<int> mailing_MunicipalityID, Nullable<int> mailing_StateID, string mailing_StreetName, Nullable<decimal> mailing_BuildingNumber, string mailing_Unit, string mailing_Zipcode, string password, Nullable<int> organziationID, Nullable<int> addressTypeID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixIDParameter = suffixID.HasValue ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(int));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var nasnIdentifierParameter = nasnIdentifier.HasValue ?
                new ObjectParameter("NasnIdentifier", nasnIdentifier) :
                new ObjectParameter("NasnIdentifier", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var secretQuestionIDParameter = secretQuestionID.HasValue ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(int));
    
            var secretQuestionAnswerParameter = secretQuestionAnswer != null ?
                new ObjectParameter("SecretQuestionAnswer", secretQuestionAnswer) :
                new ObjectParameter("SecretQuestionAnswer", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var eMailPersonalParameter = eMailPersonal != null ?
                new ObjectParameter("EMailPersonal", eMailPersonal) :
                new ObjectParameter("EMailPersonal", typeof(string));
    
            var residence_MunicipalityIDParameter = residence_MunicipalityID.HasValue ?
                new ObjectParameter("Residence_MunicipalityID", residence_MunicipalityID) :
                new ObjectParameter("Residence_MunicipalityID", typeof(int));
    
            var residence_StateIDParameter = residence_StateID.HasValue ?
                new ObjectParameter("Residence_StateID", residence_StateID) :
                new ObjectParameter("Residence_StateID", typeof(int));
    
            var residence_StreetNameParameter = residence_StreetName != null ?
                new ObjectParameter("Residence_StreetName", residence_StreetName) :
                new ObjectParameter("Residence_StreetName", typeof(string));
    
            var residence_BuildingNumberParameter = residence_BuildingNumber.HasValue ?
                new ObjectParameter("Residence_BuildingNumber", residence_BuildingNumber) :
                new ObjectParameter("Residence_BuildingNumber", typeof(decimal));
    
            var residence_UnitParameter = residence_Unit != null ?
                new ObjectParameter("Residence_Unit", residence_Unit) :
                new ObjectParameter("Residence_Unit", typeof(string));
    
            var residence_ZipcodeParameter = residence_Zipcode != null ?
                new ObjectParameter("Residence_Zipcode", residence_Zipcode) :
                new ObjectParameter("Residence_Zipcode", typeof(string));
    
            var mailing_MunicipalityIDParameter = mailing_MunicipalityID.HasValue ?
                new ObjectParameter("Mailing_MunicipalityID", mailing_MunicipalityID) :
                new ObjectParameter("Mailing_MunicipalityID", typeof(int));
    
            var mailing_StateIDParameter = mailing_StateID.HasValue ?
                new ObjectParameter("Mailing_StateID", mailing_StateID) :
                new ObjectParameter("Mailing_StateID", typeof(int));
    
            var mailing_StreetNameParameter = mailing_StreetName != null ?
                new ObjectParameter("Mailing_StreetName", mailing_StreetName) :
                new ObjectParameter("Mailing_StreetName", typeof(string));
    
            var mailing_BuildingNumberParameter = mailing_BuildingNumber.HasValue ?
                new ObjectParameter("Mailing_BuildingNumber", mailing_BuildingNumber) :
                new ObjectParameter("Mailing_BuildingNumber", typeof(decimal));
    
            var mailing_UnitParameter = mailing_Unit != null ?
                new ObjectParameter("Mailing_Unit", mailing_Unit) :
                new ObjectParameter("Mailing_Unit", typeof(string));
    
            var mailing_ZipcodeParameter = mailing_Zipcode != null ?
                new ObjectParameter("Mailing_Zipcode", mailing_Zipcode) :
                new ObjectParameter("Mailing_Zipcode", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var organziationIDParameter = organziationID.HasValue ?
                new ObjectParameter("OrganziationID", organziationID) :
                new ObjectParameter("OrganziationID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Register_Person_Result>("sp_Register_Person", firstNameParameter, mNameParameter, lastNameParameter, suffixIDParameter, sexIDParameter, dateofBirthParameter, nasnIdentifierParameter, userNameParameter, secretQuestionIDParameter, secretQuestionAnswerParameter, sSNParameter, eMailPersonalParameter, residence_MunicipalityIDParameter, residence_StateIDParameter, residence_StreetNameParameter, residence_BuildingNumberParameter, residence_UnitParameter, residence_ZipcodeParameter, mailing_MunicipalityIDParameter, mailing_StateIDParameter, mailing_StreetNameParameter, mailing_BuildingNumberParameter, mailing_UnitParameter, mailing_ZipcodeParameter, passwordParameter, organziationIDParameter, addressTypeIDParameter);
        }
    
        public virtual ObjectResult<string> sp_Register_Person_At_Different_Org(string firstName, string mName, string lastName, Nullable<int> suffixID, Nullable<int> sexID, Nullable<System.DateTime> dateofBirth, Nullable<int> secretQuestionID, string secretQuestionAnswer, string sSN, string eMailPersonal, Nullable<int> residence_MunicipalityID, Nullable<int> residence_StateID, string residence_StreetName, Nullable<decimal> residence_BuildingNumber, string residence_Unit, string residence_Zipcode, Nullable<int> mailing_MunicipalityID, Nullable<int> mailing_StateID, string mailing_StreetName, Nullable<decimal> mailing_BuildingNumber, string mailing_Unit, string mailing_Zipcode, string password, Nullable<int> organziationID, Nullable<int> addressTypeID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixIDParameter = suffixID.HasValue ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(int));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var secretQuestionIDParameter = secretQuestionID.HasValue ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(int));
    
            var secretQuestionAnswerParameter = secretQuestionAnswer != null ?
                new ObjectParameter("SecretQuestionAnswer", secretQuestionAnswer) :
                new ObjectParameter("SecretQuestionAnswer", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var eMailPersonalParameter = eMailPersonal != null ?
                new ObjectParameter("EMailPersonal", eMailPersonal) :
                new ObjectParameter("EMailPersonal", typeof(string));
    
            var residence_MunicipalityIDParameter = residence_MunicipalityID.HasValue ?
                new ObjectParameter("Residence_MunicipalityID", residence_MunicipalityID) :
                new ObjectParameter("Residence_MunicipalityID", typeof(int));
    
            var residence_StateIDParameter = residence_StateID.HasValue ?
                new ObjectParameter("Residence_StateID", residence_StateID) :
                new ObjectParameter("Residence_StateID", typeof(int));
    
            var residence_StreetNameParameter = residence_StreetName != null ?
                new ObjectParameter("Residence_StreetName", residence_StreetName) :
                new ObjectParameter("Residence_StreetName", typeof(string));
    
            var residence_BuildingNumberParameter = residence_BuildingNumber.HasValue ?
                new ObjectParameter("Residence_BuildingNumber", residence_BuildingNumber) :
                new ObjectParameter("Residence_BuildingNumber", typeof(decimal));
    
            var residence_UnitParameter = residence_Unit != null ?
                new ObjectParameter("Residence_Unit", residence_Unit) :
                new ObjectParameter("Residence_Unit", typeof(string));
    
            var residence_ZipcodeParameter = residence_Zipcode != null ?
                new ObjectParameter("Residence_Zipcode", residence_Zipcode) :
                new ObjectParameter("Residence_Zipcode", typeof(string));
    
            var mailing_MunicipalityIDParameter = mailing_MunicipalityID.HasValue ?
                new ObjectParameter("Mailing_MunicipalityID", mailing_MunicipalityID) :
                new ObjectParameter("Mailing_MunicipalityID", typeof(int));
    
            var mailing_StateIDParameter = mailing_StateID.HasValue ?
                new ObjectParameter("Mailing_StateID", mailing_StateID) :
                new ObjectParameter("Mailing_StateID", typeof(int));
    
            var mailing_StreetNameParameter = mailing_StreetName != null ?
                new ObjectParameter("Mailing_StreetName", mailing_StreetName) :
                new ObjectParameter("Mailing_StreetName", typeof(string));
    
            var mailing_BuildingNumberParameter = mailing_BuildingNumber.HasValue ?
                new ObjectParameter("Mailing_BuildingNumber", mailing_BuildingNumber) :
                new ObjectParameter("Mailing_BuildingNumber", typeof(decimal));
    
            var mailing_UnitParameter = mailing_Unit != null ?
                new ObjectParameter("Mailing_Unit", mailing_Unit) :
                new ObjectParameter("Mailing_Unit", typeof(string));
    
            var mailing_ZipcodeParameter = mailing_Zipcode != null ?
                new ObjectParameter("Mailing_Zipcode", mailing_Zipcode) :
                new ObjectParameter("Mailing_Zipcode", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var organziationIDParameter = organziationID.HasValue ?
                new ObjectParameter("OrganziationID", organziationID) :
                new ObjectParameter("OrganziationID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Register_Person_At_Different_Org", firstNameParameter, mNameParameter, lastNameParameter, suffixIDParameter, sexIDParameter, dateofBirthParameter, secretQuestionIDParameter, secretQuestionAnswerParameter, sSNParameter, eMailPersonalParameter, residence_MunicipalityIDParameter, residence_StateIDParameter, residence_StreetNameParameter, residence_BuildingNumberParameter, residence_UnitParameter, residence_ZipcodeParameter, mailing_MunicipalityIDParameter, mailing_StateIDParameter, mailing_StreetNameParameter, mailing_BuildingNumberParameter, mailing_UnitParameter, mailing_ZipcodeParameter, passwordParameter, organziationIDParameter, addressTypeIDParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_SavenUpdateComments(string comments)
        {
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SavenUpdateComments", commentsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_SaveOrganization(string organizationName, Nullable<int> bMunicipalityID, string bStreetName, Nullable<decimal> bBLDGNumber, string bUnit, string bZipCode, string bZipCode1, Nullable<int> mMunicipalityID, string mStreetName, Nullable<decimal> mBLDGNumber, string mUnit, string mZipCode, string mZipCode1, string telephone, string fax, string emailAddress, string contactPerson, Nullable<bool> isMemberAllowed, Nullable<int> addressType, Nullable<int> licenseType, string rolesIDs, string issuerNumber, Nullable<bool> allowPayByMail, Nullable<bool> allowPayByCreditCard, string merchantAccountID, string merchantID, string publicKey, string privateKey, string registrationMethod, Nullable<bool> isDuesAllowed)
        {
            var organizationNameParameter = organizationName != null ?
                new ObjectParameter("OrganizationName", organizationName) :
                new ObjectParameter("OrganizationName", typeof(string));
    
            var bMunicipalityIDParameter = bMunicipalityID.HasValue ?
                new ObjectParameter("BMunicipalityID", bMunicipalityID) :
                new ObjectParameter("BMunicipalityID", typeof(int));
    
            var bStreetNameParameter = bStreetName != null ?
                new ObjectParameter("BStreetName", bStreetName) :
                new ObjectParameter("BStreetName", typeof(string));
    
            var bBLDGNumberParameter = bBLDGNumber.HasValue ?
                new ObjectParameter("BBLDGNumber", bBLDGNumber) :
                new ObjectParameter("BBLDGNumber", typeof(decimal));
    
            var bUnitParameter = bUnit != null ?
                new ObjectParameter("BUnit", bUnit) :
                new ObjectParameter("BUnit", typeof(string));
    
            var bZipCodeParameter = bZipCode != null ?
                new ObjectParameter("BZipCode", bZipCode) :
                new ObjectParameter("BZipCode", typeof(string));
    
            var bZipCode1Parameter = bZipCode1 != null ?
                new ObjectParameter("BZipCode1", bZipCode1) :
                new ObjectParameter("BZipCode1", typeof(string));
    
            var mMunicipalityIDParameter = mMunicipalityID.HasValue ?
                new ObjectParameter("MMunicipalityID", mMunicipalityID) :
                new ObjectParameter("MMunicipalityID", typeof(int));
    
            var mStreetNameParameter = mStreetName != null ?
                new ObjectParameter("MStreetName", mStreetName) :
                new ObjectParameter("MStreetName", typeof(string));
    
            var mBLDGNumberParameter = mBLDGNumber.HasValue ?
                new ObjectParameter("MBLDGNumber", mBLDGNumber) :
                new ObjectParameter("MBLDGNumber", typeof(decimal));
    
            var mUnitParameter = mUnit != null ?
                new ObjectParameter("MUnit", mUnit) :
                new ObjectParameter("MUnit", typeof(string));
    
            var mZipCodeParameter = mZipCode != null ?
                new ObjectParameter("MZipCode", mZipCode) :
                new ObjectParameter("MZipCode", typeof(string));
    
            var mZipCode1Parameter = mZipCode1 != null ?
                new ObjectParameter("MZipCode1", mZipCode1) :
                new ObjectParameter("MZipCode1", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var isMemberAllowedParameter = isMemberAllowed.HasValue ?
                new ObjectParameter("IsMemberAllowed", isMemberAllowed) :
                new ObjectParameter("IsMemberAllowed", typeof(bool));
    
            var addressTypeParameter = addressType.HasValue ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(int));
    
            var licenseTypeParameter = licenseType.HasValue ?
                new ObjectParameter("LicenseType", licenseType) :
                new ObjectParameter("LicenseType", typeof(int));
    
            var rolesIDsParameter = rolesIDs != null ?
                new ObjectParameter("rolesIDs", rolesIDs) :
                new ObjectParameter("rolesIDs", typeof(string));
    
            var issuerNumberParameter = issuerNumber != null ?
                new ObjectParameter("IssuerNumber", issuerNumber) :
                new ObjectParameter("IssuerNumber", typeof(string));
    
            var allowPayByMailParameter = allowPayByMail.HasValue ?
                new ObjectParameter("AllowPayByMail", allowPayByMail) :
                new ObjectParameter("AllowPayByMail", typeof(bool));
    
            var allowPayByCreditCardParameter = allowPayByCreditCard.HasValue ?
                new ObjectParameter("AllowPayByCreditCard", allowPayByCreditCard) :
                new ObjectParameter("AllowPayByCreditCard", typeof(bool));
    
            var merchantAccountIDParameter = merchantAccountID != null ?
                new ObjectParameter("MerchantAccountID", merchantAccountID) :
                new ObjectParameter("MerchantAccountID", typeof(string));
    
            var merchantIDParameter = merchantID != null ?
                new ObjectParameter("MerchantID", merchantID) :
                new ObjectParameter("MerchantID", typeof(string));
    
            var publicKeyParameter = publicKey != null ?
                new ObjectParameter("PublicKey", publicKey) :
                new ObjectParameter("PublicKey", typeof(string));
    
            var privateKeyParameter = privateKey != null ?
                new ObjectParameter("PrivateKey", privateKey) :
                new ObjectParameter("PrivateKey", typeof(string));
    
            var registrationMethodParameter = registrationMethod != null ?
                new ObjectParameter("RegistrationMethod", registrationMethod) :
                new ObjectParameter("RegistrationMethod", typeof(string));
    
            var isDuesAllowedParameter = isDuesAllowed.HasValue ?
                new ObjectParameter("IsDuesAllowed", isDuesAllowed) :
                new ObjectParameter("IsDuesAllowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_SaveOrganization", organizationNameParameter, bMunicipalityIDParameter, bStreetNameParameter, bBLDGNumberParameter, bUnitParameter, bZipCodeParameter, bZipCode1Parameter, mMunicipalityIDParameter, mStreetNameParameter, mBLDGNumberParameter, mUnitParameter, mZipCodeParameter, mZipCode1Parameter, telephoneParameter, faxParameter, emailAddressParameter, contactPersonParameter, isMemberAllowedParameter, addressTypeParameter, licenseTypeParameter, rolesIDsParameter, issuerNumberParameter, allowPayByMailParameter, allowPayByCreditCardParameter, merchantAccountIDParameter, merchantIDParameter, publicKeyParameter, privateKeyParameter, registrationMethodParameter, isDuesAllowedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_SavePersonConferenceCourseEnrollment(Nullable<int> courseID, Nullable<long> personID, Nullable<int> oID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_SavePersonConferenceCourseEnrollment", courseIDParameter, personIDParameter, oIDParameter);
        }
    
        public virtual int sp_SavePersonCourseEnrollment(Nullable<int> courseID, Nullable<long> personID, Nullable<int> paymentMethodID, string promoCode, Nullable<int> feeTypeID, string amount, Nullable<int> oID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SavePersonCourseEnrollment", courseIDParameter, personIDParameter, paymentMethodIDParameter, promoCodeParameter, feeTypeIDParameter, amountParameter, oIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_SavePersonCourseSurvey_Insert(Nullable<int> courseID, Nullable<int> personID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_SavePersonCourseSurvey_Insert", courseIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_SavePersonPreCourseSurvey_Insert(Nullable<int> courseID, Nullable<int> personID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_SavePersonPreCourseSurvey_Insert", courseIDParameter, personIDParameter);
        }
    
        public virtual int sp_SaveWhatsNew(string @event, Nullable<System.DateTime> dateCreated, string visibility)
        {
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var visibilityParameter = visibility != null ?
                new ObjectParameter("Visibility", visibility) :
                new ObjectParameter("Visibility", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveWhatsNew", eventParameter, dateCreatedParameter, visibilityParameter);
        }
    
        public virtual ObjectResult<sp_SchoolDistricts_Result> sp_SchoolDistricts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SchoolDistricts_Result>("sp_SchoolDistricts");
        }
    
        public virtual ObjectResult<sp_SchoolDistricts_Get_Result> sp_SchoolDistricts_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SchoolDistricts_Get_Result>("sp_SchoolDistricts_Get");
        }
    
        public virtual ObjectResult<sp_SchoolNames_Get_Result> sp_SchoolNames_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SchoolNames_Get_Result>("sp_SchoolNames_Get");
        }
    
        public virtual int Sp_SetCoursePaymentStatus(Nullable<int> courseID, Nullable<int> personID, Nullable<int> paymentStatus, Nullable<int> eMasterID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var paymentStatusParameter = paymentStatus.HasValue ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(int));
    
            var eMasterIDParameter = eMasterID.HasValue ?
                new ObjectParameter("EMasterID", eMasterID) :
                new ObjectParameter("EMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SetCoursePaymentStatus", courseIDParameter, personIDParameter, paymentStatusParameter, eMasterIDParameter);
        }
    
        public virtual int Sp_SetPaymentStatus(Nullable<int> conferenceID, Nullable<int> personID, Nullable<int> paymentStatus, Nullable<int> eMasterID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var paymentStatusParameter = paymentStatus.HasValue ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(int));
    
            var eMasterIDParameter = eMasterID.HasValue ?
                new ObjectParameter("EMasterID", eMasterID) :
                new ObjectParameter("EMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SetPaymentStatus", conferenceIDParameter, personIDParameter, paymentStatusParameter, eMasterIDParameter);
        }
    
        public virtual ObjectResult<Sp_SurveyListForQuestionEditing_Get_Result> Sp_SurveyListForQuestionEditing_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SurveyListForQuestionEditing_Get_Result>("Sp_SurveyListForQuestionEditing_Get");
        }
    
        public virtual int sp_SurveyQuestion_Update(Nullable<int> surveyID, Nullable<int> questionID, Nullable<int> questionOrder)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var questionOrderParameter = questionOrder.HasValue ?
                new ObjectParameter("QuestionOrder", questionOrder) :
                new ObjectParameter("QuestionOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SurveyQuestion_Update", surveyIDParameter, questionIDParameter, questionOrderParameter);
        }
    
        public virtual int sp_SurveyQuestionOrder_Update(Nullable<int> surveyQuestionID, Nullable<int> newOrder)
        {
            var surveyQuestionIDParameter = surveyQuestionID.HasValue ?
                new ObjectParameter("SurveyQuestionID", surveyQuestionID) :
                new ObjectParameter("SurveyQuestionID", typeof(int));
    
            var newOrderParameter = newOrder.HasValue ?
                new ObjectParameter("NewOrder", newOrder) :
                new ObjectParameter("NewOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SurveyQuestionOrder_Update", surveyQuestionIDParameter, newOrderParameter);
        }
    
        public virtual ObjectResult<sp_tbl_Districts_Result> sp_tbl_Districts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tbl_Districts_Result>("sp_tbl_Districts");
        }
    
        public virtual ObjectResult<sp_tbl_Schools_Result> sp_tbl_Schools()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tbl_Schools_Result>("sp_tbl_Schools");
        }
    
        public virtual int sp_UnassignQuestionToSurvey_Delete(Nullable<int> surveyID, Nullable<int> surveyQuestionID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var surveyQuestionIDParameter = surveyQuestionID.HasValue ?
                new ObjectParameter("SurveyQuestionID", surveyQuestionID) :
                new ObjectParameter("SurveyQuestionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UnassignQuestionToSurvey_Delete", surveyIDParameter, surveyQuestionIDParameter);
        }
    
        public virtual int Sp_Update_StandAloneCourse(Nullable<int> courseId, Nullable<int> facilityID, string roomNbr, Nullable<short> attendeeCapacity, Nullable<int> courseTopicID, Nullable<int> courseFocusID, Nullable<int> courseLearningOutcomeID, Nullable<int> courseEffectID, Nullable<int> courseEvaluationMethodID, Nullable<int> surveyID, Nullable<int> preSurveyID, string courseDescription, Nullable<System.DateTime> courseDate, Nullable<System.TimeSpan> courseStartTime, Nullable<System.TimeSpan> courseEndTime, Nullable<System.TimeSpan> offTaskMinutes, Nullable<System.DateTime> courseEnrollmentDeadline, Nullable<System.DateTime> credentialIssuanceDate, string promotionalurl, Nullable<System.DateTime> postingDate, Nullable<int> setASide)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var roomNbrParameter = roomNbr != null ?
                new ObjectParameter("RoomNbr", roomNbr) :
                new ObjectParameter("RoomNbr", typeof(string));
    
            var attendeeCapacityParameter = attendeeCapacity.HasValue ?
                new ObjectParameter("AttendeeCapacity", attendeeCapacity) :
                new ObjectParameter("AttendeeCapacity", typeof(short));
    
            var courseTopicIDParameter = courseTopicID.HasValue ?
                new ObjectParameter("CourseTopicID", courseTopicID) :
                new ObjectParameter("CourseTopicID", typeof(int));
    
            var courseFocusIDParameter = courseFocusID.HasValue ?
                new ObjectParameter("CourseFocusID", courseFocusID) :
                new ObjectParameter("CourseFocusID", typeof(int));
    
            var courseLearningOutcomeIDParameter = courseLearningOutcomeID.HasValue ?
                new ObjectParameter("CourseLearningOutcomeID", courseLearningOutcomeID) :
                new ObjectParameter("CourseLearningOutcomeID", typeof(int));
    
            var courseEffectIDParameter = courseEffectID.HasValue ?
                new ObjectParameter("CourseEffectID", courseEffectID) :
                new ObjectParameter("CourseEffectID", typeof(int));
    
            var courseEvaluationMethodIDParameter = courseEvaluationMethodID.HasValue ?
                new ObjectParameter("CourseEvaluationMethodID", courseEvaluationMethodID) :
                new ObjectParameter("CourseEvaluationMethodID", typeof(int));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var preSurveyIDParameter = preSurveyID.HasValue ?
                new ObjectParameter("PreSurveyID", preSurveyID) :
                new ObjectParameter("PreSurveyID", typeof(int));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var courseDateParameter = courseDate.HasValue ?
                new ObjectParameter("CourseDate", courseDate) :
                new ObjectParameter("CourseDate", typeof(System.DateTime));
    
            var courseStartTimeParameter = courseStartTime.HasValue ?
                new ObjectParameter("CourseStartTime", courseStartTime) :
                new ObjectParameter("CourseStartTime", typeof(System.TimeSpan));
    
            var courseEndTimeParameter = courseEndTime.HasValue ?
                new ObjectParameter("CourseEndTime", courseEndTime) :
                new ObjectParameter("CourseEndTime", typeof(System.TimeSpan));
    
            var offTaskMinutesParameter = offTaskMinutes.HasValue ?
                new ObjectParameter("OffTaskMinutes", offTaskMinutes) :
                new ObjectParameter("OffTaskMinutes", typeof(System.TimeSpan));
    
            var courseEnrollmentDeadlineParameter = courseEnrollmentDeadline.HasValue ?
                new ObjectParameter("CourseEnrollmentDeadline", courseEnrollmentDeadline) :
                new ObjectParameter("CourseEnrollmentDeadline", typeof(System.DateTime));
    
            var credentialIssuanceDateParameter = credentialIssuanceDate.HasValue ?
                new ObjectParameter("CredentialIssuanceDate", credentialIssuanceDate) :
                new ObjectParameter("CredentialIssuanceDate", typeof(System.DateTime));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            var setASideParameter = setASide.HasValue ?
                new ObjectParameter("SetASide", setASide) :
                new ObjectParameter("SetASide", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_StandAloneCourse", courseIdParameter, facilityIDParameter, roomNbrParameter, attendeeCapacityParameter, courseTopicIDParameter, courseFocusIDParameter, courseLearningOutcomeIDParameter, courseEffectIDParameter, courseEvaluationMethodIDParameter, surveyIDParameter, preSurveyIDParameter, courseDescriptionParameter, courseDateParameter, courseStartTimeParameter, courseEndTimeParameter, offTaskMinutesParameter, courseEnrollmentDeadlineParameter, credentialIssuanceDateParameter, promotionalurlParameter, postingDateParameter, setASideParameter);
        }
    
        public virtual int sp_UpdateFilesOrder(Nullable<int> ordernumber, Nullable<int> iD)
        {
            var ordernumberParameter = ordernumber.HasValue ?
                new ObjectParameter("ordernumber", ordernumber) :
                new ObjectParameter("ordernumber", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateFilesOrder", ordernumberParameter, iDParameter);
        }
    
        public virtual int sp_UpdateOrganization(Nullable<int> organizationID, string organizationName, Nullable<int> bMunicipalityID, string bStreetName, Nullable<decimal> bBLDGNumber, string bUnit, string bZipCode, string bZipCode1, Nullable<int> mMunicipalityID, string mStreetName, Nullable<decimal> mBLDGNumber, string mUnit, string mZipCode, string mZipCode1, string telephone, string fax, string emailAddress, string contactPerson, Nullable<bool> isMemberAllowed, Nullable<int> addressType, Nullable<int> licenseType, string rolesIDs, Nullable<long> personID, string issuerNumber, Nullable<bool> allowPayByMail, Nullable<bool> allowPayByCreditCard, string merchantAccountID, string merchantID, string publicKey, string privateKey, string registrationMethod, Nullable<bool> isDuesAllowed)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var organizationNameParameter = organizationName != null ?
                new ObjectParameter("OrganizationName", organizationName) :
                new ObjectParameter("OrganizationName", typeof(string));
    
            var bMunicipalityIDParameter = bMunicipalityID.HasValue ?
                new ObjectParameter("BMunicipalityID", bMunicipalityID) :
                new ObjectParameter("BMunicipalityID", typeof(int));
    
            var bStreetNameParameter = bStreetName != null ?
                new ObjectParameter("BStreetName", bStreetName) :
                new ObjectParameter("BStreetName", typeof(string));
    
            var bBLDGNumberParameter = bBLDGNumber.HasValue ?
                new ObjectParameter("BBLDGNumber", bBLDGNumber) :
                new ObjectParameter("BBLDGNumber", typeof(decimal));
    
            var bUnitParameter = bUnit != null ?
                new ObjectParameter("BUnit", bUnit) :
                new ObjectParameter("BUnit", typeof(string));
    
            var bZipCodeParameter = bZipCode != null ?
                new ObjectParameter("BZipCode", bZipCode) :
                new ObjectParameter("BZipCode", typeof(string));
    
            var bZipCode1Parameter = bZipCode1 != null ?
                new ObjectParameter("BZipCode1", bZipCode1) :
                new ObjectParameter("BZipCode1", typeof(string));
    
            var mMunicipalityIDParameter = mMunicipalityID.HasValue ?
                new ObjectParameter("MMunicipalityID", mMunicipalityID) :
                new ObjectParameter("MMunicipalityID", typeof(int));
    
            var mStreetNameParameter = mStreetName != null ?
                new ObjectParameter("MStreetName", mStreetName) :
                new ObjectParameter("MStreetName", typeof(string));
    
            var mBLDGNumberParameter = mBLDGNumber.HasValue ?
                new ObjectParameter("MBLDGNumber", mBLDGNumber) :
                new ObjectParameter("MBLDGNumber", typeof(decimal));
    
            var mUnitParameter = mUnit != null ?
                new ObjectParameter("MUnit", mUnit) :
                new ObjectParameter("MUnit", typeof(string));
    
            var mZipCodeParameter = mZipCode != null ?
                new ObjectParameter("MZipCode", mZipCode) :
                new ObjectParameter("MZipCode", typeof(string));
    
            var mZipCode1Parameter = mZipCode1 != null ?
                new ObjectParameter("MZipCode1", mZipCode1) :
                new ObjectParameter("MZipCode1", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var isMemberAllowedParameter = isMemberAllowed.HasValue ?
                new ObjectParameter("IsMemberAllowed", isMemberAllowed) :
                new ObjectParameter("IsMemberAllowed", typeof(bool));
    
            var addressTypeParameter = addressType.HasValue ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(int));
    
            var licenseTypeParameter = licenseType.HasValue ?
                new ObjectParameter("LicenseType", licenseType) :
                new ObjectParameter("LicenseType", typeof(int));
    
            var rolesIDsParameter = rolesIDs != null ?
                new ObjectParameter("rolesIDs", rolesIDs) :
                new ObjectParameter("rolesIDs", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(long));
    
            var issuerNumberParameter = issuerNumber != null ?
                new ObjectParameter("IssuerNumber", issuerNumber) :
                new ObjectParameter("IssuerNumber", typeof(string));
    
            var allowPayByMailParameter = allowPayByMail.HasValue ?
                new ObjectParameter("AllowPayByMail", allowPayByMail) :
                new ObjectParameter("AllowPayByMail", typeof(bool));
    
            var allowPayByCreditCardParameter = allowPayByCreditCard.HasValue ?
                new ObjectParameter("AllowPayByCreditCard", allowPayByCreditCard) :
                new ObjectParameter("AllowPayByCreditCard", typeof(bool));
    
            var merchantAccountIDParameter = merchantAccountID != null ?
                new ObjectParameter("MerchantAccountID", merchantAccountID) :
                new ObjectParameter("MerchantAccountID", typeof(string));
    
            var merchantIDParameter = merchantID != null ?
                new ObjectParameter("MerchantID", merchantID) :
                new ObjectParameter("MerchantID", typeof(string));
    
            var publicKeyParameter = publicKey != null ?
                new ObjectParameter("PublicKey", publicKey) :
                new ObjectParameter("PublicKey", typeof(string));
    
            var privateKeyParameter = privateKey != null ?
                new ObjectParameter("PrivateKey", privateKey) :
                new ObjectParameter("PrivateKey", typeof(string));
    
            var registrationMethodParameter = registrationMethod != null ?
                new ObjectParameter("RegistrationMethod", registrationMethod) :
                new ObjectParameter("RegistrationMethod", typeof(string));
    
            var isDuesAllowedParameter = isDuesAllowed.HasValue ?
                new ObjectParameter("IsDuesAllowed", isDuesAllowed) :
                new ObjectParameter("IsDuesAllowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateOrganization", organizationIDParameter, organizationNameParameter, bMunicipalityIDParameter, bStreetNameParameter, bBLDGNumberParameter, bUnitParameter, bZipCodeParameter, bZipCode1Parameter, mMunicipalityIDParameter, mStreetNameParameter, mBLDGNumberParameter, mUnitParameter, mZipCodeParameter, mZipCode1Parameter, telephoneParameter, faxParameter, emailAddressParameter, contactPersonParameter, isMemberAllowedParameter, addressTypeParameter, licenseTypeParameter, rolesIDsParameter, personIDParameter, issuerNumberParameter, allowPayByMailParameter, allowPayByCreditCardParameter, merchantAccountIDParameter, merchantIDParameter, publicKeyParameter, privateKeyParameter, registrationMethodParameter, isDuesAllowedParameter);
        }
    
        public virtual int sp_UpdateQuestionByID_Update(Nullable<int> questionID, string questionDesc)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var questionDescParameter = questionDesc != null ?
                new ObjectParameter("QuestionDesc", questionDesc) :
                new ObjectParameter("QuestionDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateQuestionByID_Update", questionIDParameter, questionDescParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_UploadFileInfo(string filetype, string visibility, string levels, string title, Nullable<System.DateTime> date, Nullable<int> oID, string fileName)
        {
            var filetypeParameter = filetype != null ?
                new ObjectParameter("filetype", filetype) :
                new ObjectParameter("filetype", typeof(string));
    
            var visibilityParameter = visibility != null ?
                new ObjectParameter("visibility", visibility) :
                new ObjectParameter("visibility", typeof(string));
    
            var levelsParameter = levels != null ?
                new ObjectParameter("levels", levels) :
                new ObjectParameter("levels", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UploadFileInfo", filetypeParameter, visibilityParameter, levelsParameter, titleParameter, dateParameter, oIDParameter, fileNameParameter);
        }
    
        public virtual ObjectResult<string> sp_UserExists(string firstName, string middleName, string lastName, Nullable<int> genID, Nullable<System.DateTime> birthDate, Nullable<int> quesID, string answer, string emailId, Nullable<int> organizationId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genIDParameter = genID.HasValue ?
                new ObjectParameter("GenID", genID) :
                new ObjectParameter("GenID", typeof(int));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var quesIDParameter = quesID.HasValue ?
                new ObjectParameter("QuesID", quesID) :
                new ObjectParameter("QuesID", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("answer", answer) :
                new ObjectParameter("answer", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("organizationId", organizationId) :
                new ObjectParameter("organizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_UserExists", firstNameParameter, middleNameParameter, lastNameParameter, genIDParameter, birthDateParameter, quesIDParameter, answerParameter, emailIdParameter, organizationIdParameter);
        }
    
        public virtual ObjectResult<string> sp_ValidateEventCredential_Android(string credential, Nullable<int> eventID)
        {
            var credentialParameter = credential != null ?
                new ObjectParameter("Credential", credential) :
                new ObjectParameter("Credential", typeof(string));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_ValidateEventCredential_Android", credentialParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<sp_ValidateUser_Result> sp_ValidateUser(string userName, string password, Nullable<int> organizationID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidateUser_Result>("sp_ValidateUser", userNameParameter, passwordParameter, organizationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Test(string firstName, string mName, string lastName, Nullable<int> suffixID, Nullable<int> sexID, Nullable<System.DateTime> dateofBirth, Nullable<long> nasnIdentifier, Nullable<int> secretQuestionID, string secretQuestionAnswer, string sSN, string eMailPersonal, Nullable<int> residence_MunicipalityID, Nullable<int> residence_StateID, string residence_StreetName, Nullable<decimal> residence_BuildingNumber, string residence_Unit, string residence_Zipcode, Nullable<int> mailing_MunicipalityID, Nullable<int> mailing_StateID, string mailing_StreetName, Nullable<decimal> mailing_BuildingNumber, string mailing_Unit, string mailing_Zipcode, string password, Nullable<int> organziationID, Nullable<int> addressTypeID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixIDParameter = suffixID.HasValue ?
                new ObjectParameter("SuffixID", suffixID) :
                new ObjectParameter("SuffixID", typeof(int));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var nasnIdentifierParameter = nasnIdentifier.HasValue ?
                new ObjectParameter("NasnIdentifier", nasnIdentifier) :
                new ObjectParameter("NasnIdentifier", typeof(long));
    
            var secretQuestionIDParameter = secretQuestionID.HasValue ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(int));
    
            var secretQuestionAnswerParameter = secretQuestionAnswer != null ?
                new ObjectParameter("SecretQuestionAnswer", secretQuestionAnswer) :
                new ObjectParameter("SecretQuestionAnswer", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var eMailPersonalParameter = eMailPersonal != null ?
                new ObjectParameter("EMailPersonal", eMailPersonal) :
                new ObjectParameter("EMailPersonal", typeof(string));
    
            var residence_MunicipalityIDParameter = residence_MunicipalityID.HasValue ?
                new ObjectParameter("Residence_MunicipalityID", residence_MunicipalityID) :
                new ObjectParameter("Residence_MunicipalityID", typeof(int));
    
            var residence_StateIDParameter = residence_StateID.HasValue ?
                new ObjectParameter("Residence_StateID", residence_StateID) :
                new ObjectParameter("Residence_StateID", typeof(int));
    
            var residence_StreetNameParameter = residence_StreetName != null ?
                new ObjectParameter("Residence_StreetName", residence_StreetName) :
                new ObjectParameter("Residence_StreetName", typeof(string));
    
            var residence_BuildingNumberParameter = residence_BuildingNumber.HasValue ?
                new ObjectParameter("Residence_BuildingNumber", residence_BuildingNumber) :
                new ObjectParameter("Residence_BuildingNumber", typeof(decimal));
    
            var residence_UnitParameter = residence_Unit != null ?
                new ObjectParameter("Residence_Unit", residence_Unit) :
                new ObjectParameter("Residence_Unit", typeof(string));
    
            var residence_ZipcodeParameter = residence_Zipcode != null ?
                new ObjectParameter("Residence_Zipcode", residence_Zipcode) :
                new ObjectParameter("Residence_Zipcode", typeof(string));
    
            var mailing_MunicipalityIDParameter = mailing_MunicipalityID.HasValue ?
                new ObjectParameter("Mailing_MunicipalityID", mailing_MunicipalityID) :
                new ObjectParameter("Mailing_MunicipalityID", typeof(int));
    
            var mailing_StateIDParameter = mailing_StateID.HasValue ?
                new ObjectParameter("Mailing_StateID", mailing_StateID) :
                new ObjectParameter("Mailing_StateID", typeof(int));
    
            var mailing_StreetNameParameter = mailing_StreetName != null ?
                new ObjectParameter("Mailing_StreetName", mailing_StreetName) :
                new ObjectParameter("Mailing_StreetName", typeof(string));
    
            var mailing_BuildingNumberParameter = mailing_BuildingNumber.HasValue ?
                new ObjectParameter("Mailing_BuildingNumber", mailing_BuildingNumber) :
                new ObjectParameter("Mailing_BuildingNumber", typeof(decimal));
    
            var mailing_UnitParameter = mailing_Unit != null ?
                new ObjectParameter("Mailing_Unit", mailing_Unit) :
                new ObjectParameter("Mailing_Unit", typeof(string));
    
            var mailing_ZipcodeParameter = mailing_Zipcode != null ?
                new ObjectParameter("Mailing_Zipcode", mailing_Zipcode) :
                new ObjectParameter("Mailing_Zipcode", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var organziationIDParameter = organziationID.HasValue ?
                new ObjectParameter("OrganziationID", organziationID) :
                new ObjectParameter("OrganziationID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Test", firstNameParameter, mNameParameter, lastNameParameter, suffixIDParameter, sexIDParameter, dateofBirthParameter, nasnIdentifierParameter, secretQuestionIDParameter, secretQuestionAnswerParameter, sSNParameter, eMailPersonalParameter, residence_MunicipalityIDParameter, residence_StateIDParameter, residence_StreetNameParameter, residence_BuildingNumberParameter, residence_UnitParameter, residence_ZipcodeParameter, mailing_MunicipalityIDParameter, mailing_StateIDParameter, mailing_StreetNameParameter, mailing_BuildingNumberParameter, mailing_UnitParameter, mailing_ZipcodeParameter, passwordParameter, organziationIDParameter, addressTypeIDParameter);
        }
    
        public virtual ObjectResult<UnrollFromConferences_Result> UnrollFromConferences(Nullable<int> conferenceID, Nullable<int> personID, Nullable<int> oID, Nullable<int> paymentStatus, Nullable<int> eMasterID)
        {
            var conferenceIDParameter = conferenceID.HasValue ?
                new ObjectParameter("ConferenceID", conferenceID) :
                new ObjectParameter("ConferenceID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var paymentStatusParameter = paymentStatus.HasValue ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(int));
    
            var eMasterIDParameter = eMasterID.HasValue ?
                new ObjectParameter("EMasterID", eMasterID) :
                new ObjectParameter("EMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnrollFromConferences_Result>("UnrollFromConferences", conferenceIDParameter, personIDParameter, oIDParameter, paymentStatusParameter, eMasterIDParameter);
        }
    
        public virtual ObjectResult<UnrollFromcourse_Result> UnrollFromcourse(Nullable<int> courseID, Nullable<int> personID, Nullable<int> oID, Nullable<int> paymentStatus, Nullable<int> eMasterID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var paymentStatusParameter = paymentStatus.HasValue ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(int));
    
            var eMasterIDParameter = eMasterID.HasValue ?
                new ObjectParameter("EMasterID", eMasterID) :
                new ObjectParameter("EMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnrollFromcourse_Result>("UnrollFromcourse", courseIDParameter, personIDParameter, oIDParameter, paymentStatusParameter, eMasterIDParameter);
        }
    
        public virtual int updateCosponsors(Nullable<int> organizationID, Nullable<int> eventID, string eventType)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCosponsors", organizationIDParameter, eventIDParameter, eventTypeParameter);
        }
    
        public virtual int updateExpiryDate(Nullable<System.DateTime> date, Nullable<int> organizationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateExpiryDate", dateParameter, organizationIDParameter);
        }
    
        public virtual int UpdateMemberShipStatus(Nullable<int> personID, Nullable<int> organizationID, Nullable<bool> isMember)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var isMemberParameter = isMember.HasValue ?
                new ObjectParameter("IsMember", isMember) :
                new ObjectParameter("IsMember", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMemberShipStatus", personIDParameter, organizationIDParameter, isMemberParameter);
        }
    
        public virtual int UpdateOnlincviews(Nullable<long> personid, Nullable<int> courseid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(long));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOnlincviews", personidParameter, courseidParameter);
        }
    
        public virtual int UpdateOnlineCourse(Nullable<int> courseID, Nullable<int> facilityID, Nullable<bool> courseIsOnline, Nullable<bool> courseIsAssignedToConference, string roomNbr, Nullable<short> attendeeCapacity, Nullable<int> courseTopicID, Nullable<int> courseFocusID, Nullable<int> courseLearningOutcomeID, Nullable<int> courseEffectID, Nullable<int> courseEvaluationMethodID, Nullable<int> surveyID, Nullable<int> preSurveyID, string courseDescription, Nullable<System.DateTime> courseDate, Nullable<System.DateTime> courseStartTime, Nullable<System.DateTime> courseEndTime, Nullable<System.TimeSpan> offTaskMinutes, Nullable<System.DateTime> courseEnrollmentDeadline, Nullable<System.DateTime> credentialIssuanceDate, string promotionalurl, string filename, Nullable<int> personID, Nullable<int> views, Nullable<System.DateTime> postingDate)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var courseIsOnlineParameter = courseIsOnline.HasValue ?
                new ObjectParameter("CourseIsOnline", courseIsOnline) :
                new ObjectParameter("CourseIsOnline", typeof(bool));
    
            var courseIsAssignedToConferenceParameter = courseIsAssignedToConference.HasValue ?
                new ObjectParameter("CourseIsAssignedToConference", courseIsAssignedToConference) :
                new ObjectParameter("CourseIsAssignedToConference", typeof(bool));
    
            var roomNbrParameter = roomNbr != null ?
                new ObjectParameter("RoomNbr", roomNbr) :
                new ObjectParameter("RoomNbr", typeof(string));
    
            var attendeeCapacityParameter = attendeeCapacity.HasValue ?
                new ObjectParameter("AttendeeCapacity", attendeeCapacity) :
                new ObjectParameter("AttendeeCapacity", typeof(short));
    
            var courseTopicIDParameter = courseTopicID.HasValue ?
                new ObjectParameter("CourseTopicID", courseTopicID) :
                new ObjectParameter("CourseTopicID", typeof(int));
    
            var courseFocusIDParameter = courseFocusID.HasValue ?
                new ObjectParameter("CourseFocusID", courseFocusID) :
                new ObjectParameter("CourseFocusID", typeof(int));
    
            var courseLearningOutcomeIDParameter = courseLearningOutcomeID.HasValue ?
                new ObjectParameter("CourseLearningOutcomeID", courseLearningOutcomeID) :
                new ObjectParameter("CourseLearningOutcomeID", typeof(int));
    
            var courseEffectIDParameter = courseEffectID.HasValue ?
                new ObjectParameter("CourseEffectID", courseEffectID) :
                new ObjectParameter("CourseEffectID", typeof(int));
    
            var courseEvaluationMethodIDParameter = courseEvaluationMethodID.HasValue ?
                new ObjectParameter("CourseEvaluationMethodID", courseEvaluationMethodID) :
                new ObjectParameter("CourseEvaluationMethodID", typeof(int));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(int));
    
            var preSurveyIDParameter = preSurveyID.HasValue ?
                new ObjectParameter("PreSurveyID", preSurveyID) :
                new ObjectParameter("PreSurveyID", typeof(int));
    
            var courseDescriptionParameter = courseDescription != null ?
                new ObjectParameter("CourseDescription", courseDescription) :
                new ObjectParameter("CourseDescription", typeof(string));
    
            var courseDateParameter = courseDate.HasValue ?
                new ObjectParameter("CourseDate", courseDate) :
                new ObjectParameter("CourseDate", typeof(System.DateTime));
    
            var courseStartTimeParameter = courseStartTime.HasValue ?
                new ObjectParameter("CourseStartTime", courseStartTime) :
                new ObjectParameter("CourseStartTime", typeof(System.DateTime));
    
            var courseEndTimeParameter = courseEndTime.HasValue ?
                new ObjectParameter("CourseEndTime", courseEndTime) :
                new ObjectParameter("CourseEndTime", typeof(System.DateTime));
    
            var offTaskMinutesParameter = offTaskMinutes.HasValue ?
                new ObjectParameter("OffTaskMinutes", offTaskMinutes) :
                new ObjectParameter("OffTaskMinutes", typeof(System.TimeSpan));
    
            var courseEnrollmentDeadlineParameter = courseEnrollmentDeadline.HasValue ?
                new ObjectParameter("CourseEnrollmentDeadline", courseEnrollmentDeadline) :
                new ObjectParameter("CourseEnrollmentDeadline", typeof(System.DateTime));
    
            var credentialIssuanceDateParameter = credentialIssuanceDate.HasValue ?
                new ObjectParameter("CredentialIssuanceDate", credentialIssuanceDate) :
                new ObjectParameter("CredentialIssuanceDate", typeof(System.DateTime));
    
            var promotionalurlParameter = promotionalurl != null ?
                new ObjectParameter("Promotionalurl", promotionalurl) :
                new ObjectParameter("Promotionalurl", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("Filename", filename) :
                new ObjectParameter("Filename", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var viewsParameter = views.HasValue ?
                new ObjectParameter("Views", views) :
                new ObjectParameter("Views", typeof(int));
    
            var postingDateParameter = postingDate.HasValue ?
                new ObjectParameter("PostingDate", postingDate) :
                new ObjectParameter("PostingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOnlineCourse", courseIDParameter, facilityIDParameter, courseIsOnlineParameter, courseIsAssignedToConferenceParameter, roomNbrParameter, attendeeCapacityParameter, courseTopicIDParameter, courseFocusIDParameter, courseLearningOutcomeIDParameter, courseEffectIDParameter, courseEvaluationMethodIDParameter, surveyIDParameter, preSurveyIDParameter, courseDescriptionParameter, courseDateParameter, courseStartTimeParameter, courseEndTimeParameter, offTaskMinutesParameter, courseEnrollmentDeadlineParameter, credentialIssuanceDateParameter, promotionalurlParameter, filenameParameter, personIDParameter, viewsParameter, postingDateParameter);
        }
    
        public virtual int UpdateOrganizationSpecific(Nullable<int> personID, Nullable<int> organizationID, string password, Nullable<bool> isAdmin, Nullable<bool> isRegUser, Nullable<bool> isMember, Nullable<System.DateTime> joinOnDate, Nullable<System.DateTime> expiryDate, Nullable<decimal> dues, Nullable<System.DateTime> paidOnDate, string membershipID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var isRegUserParameter = isRegUser.HasValue ?
                new ObjectParameter("IsRegUser", isRegUser) :
                new ObjectParameter("IsRegUser", typeof(bool));
    
            var isMemberParameter = isMember.HasValue ?
                new ObjectParameter("IsMember", isMember) :
                new ObjectParameter("IsMember", typeof(bool));
    
            var joinOnDateParameter = joinOnDate.HasValue ?
                new ObjectParameter("JoinOnDate", joinOnDate) :
                new ObjectParameter("JoinOnDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var duesParameter = dues.HasValue ?
                new ObjectParameter("Dues", dues) :
                new ObjectParameter("Dues", typeof(decimal));
    
            var paidOnDateParameter = paidOnDate.HasValue ?
                new ObjectParameter("PaidOnDate", paidOnDate) :
                new ObjectParameter("PaidOnDate", typeof(System.DateTime));
    
            var membershipIDParameter = membershipID != null ?
                new ObjectParameter("MembershipID", membershipID) :
                new ObjectParameter("MembershipID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrganizationSpecific", personIDParameter, organizationIDParameter, passwordParameter, isAdminParameter, isRegUserParameter, isMemberParameter, joinOnDateParameter, expiryDateParameter, duesParameter, paidOnDateParameter, membershipIDParameter);
        }
    
        public virtual int UpdatePersonalInfo(Nullable<int> personId, Nullable<int> oID, string username, Nullable<int> secretQuestionID, string answer, string password, Nullable<bool> isSuperUser, Nullable<bool> isAccrep)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var secretQuestionIDParameter = secretQuestionID.HasValue ?
                new ObjectParameter("SecretQuestionID", secretQuestionID) :
                new ObjectParameter("SecretQuestionID", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isSuperUserParameter = isSuperUser.HasValue ?
                new ObjectParameter("IsSuperUser", isSuperUser) :
                new ObjectParameter("IsSuperUser", typeof(bool));
    
            var isAccrepParameter = isAccrep.HasValue ?
                new ObjectParameter("IsAccrep", isAccrep) :
                new ObjectParameter("IsAccrep", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePersonalInfo", personIdParameter, oIDParameter, usernameParameter, secretQuestionIDParameter, answerParameter, passwordParameter, isSuperUserParameter, isAccrepParameter);
        }
    
        public virtual int UpdateProductLicense(Nullable<int> productID, Nullable<int> organizationID, Nullable<System.DateTime> licenseOriginationDate, Nullable<System.DateTime> lincenseExpirationDate, Nullable<decimal> feeOrigination, Nullable<decimal> feeAnnual, Nullable<decimal> feeTransactional, Nullable<int> accountRep)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var licenseOriginationDateParameter = licenseOriginationDate.HasValue ?
                new ObjectParameter("LicenseOriginationDate", licenseOriginationDate) :
                new ObjectParameter("LicenseOriginationDate", typeof(System.DateTime));
    
            var lincenseExpirationDateParameter = lincenseExpirationDate.HasValue ?
                new ObjectParameter("LincenseExpirationDate", lincenseExpirationDate) :
                new ObjectParameter("LincenseExpirationDate", typeof(System.DateTime));
    
            var feeOriginationParameter = feeOrigination.HasValue ?
                new ObjectParameter("FeeOrigination", feeOrigination) :
                new ObjectParameter("FeeOrigination", typeof(decimal));
    
            var feeAnnualParameter = feeAnnual.HasValue ?
                new ObjectParameter("FeeAnnual", feeAnnual) :
                new ObjectParameter("FeeAnnual", typeof(decimal));
    
            var feeTransactionalParameter = feeTransactional.HasValue ?
                new ObjectParameter("FeeTransactional", feeTransactional) :
                new ObjectParameter("FeeTransactional", typeof(decimal));
    
            var accountRepParameter = accountRep.HasValue ?
                new ObjectParameter("AccountRep", accountRep) :
                new ObjectParameter("AccountRep", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductLicense", productIDParameter, organizationIDParameter, licenseOriginationDateParameter, lincenseExpirationDateParameter, feeOriginationParameter, feeAnnualParameter, feeTransactionalParameter, accountRepParameter);
        }
    
        public virtual int UpdateRegulatoryBodyNewOrg(Nullable<int> regulatoryID, Nullable<int> organizationId)
        {
            var regulatoryIDParameter = regulatoryID.HasValue ?
                new ObjectParameter("RegulatoryID", regulatoryID) :
                new ObjectParameter("RegulatoryID", typeof(int));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRegulatoryBodyNewOrg", regulatoryIDParameter, organizationIdParameter);
        }
    }
}
